/**
 * @param {*} hash
 */
declare function isMultihash(hash: any): boolean;
/**
 * @param {*} input
 */
declare function isMultiaddr(input: any): boolean;
/**
 * @param {string | Uint8Array | Multiaddr} input
 */
declare function isPeerMultiaddr(input: string | Uint8Array | Multiaddr): boolean;
/**
 * @param {*} hash
 */
declare function isCID(hash: any): boolean;
import { CID } from "multiformats/cid";
/**
 * @param {string | Uint8Array} url
 */
export function ipfsSubdomain(url: string | Uint8Array): boolean;
/**
 * @param {string | Uint8Array} url
 */
export function ipnsSubdomain(url: string | Uint8Array): boolean;
/**
 * @param {string | Uint8Array} url
 */
export function subdomain(url: string | Uint8Array): boolean;
export const subdomainGatewayPattern: RegExp;
/**
 * @param {string | Uint8Array} url
 */
export function ipfsUrl(url: string | Uint8Array): boolean;
/**
 * @param {string | Uint8Array} url
 */
export function ipnsUrl(url: string | Uint8Array): boolean;
/**
 * @param {string | Uint8Array} url
 */
export function url(url: string | Uint8Array): boolean;
export const pathGatewayPattern: RegExp;
/**
 * @param {string | Uint8Array} path
 */
export function path(path: string | Uint8Array): boolean;
export const pathPattern: RegExp;
import { Multiaddr } from "multiaddr";
export declare function base32cid(cid: string | Uint8Array | CID): boolean;
export declare function ipfsPath(path: string | Uint8Array): boolean;
export declare function ipnsPath(path: string | Uint8Array): boolean;
export declare function urlOrPath(x: string | Uint8Array): boolean;
export declare function cidPath(path: string | Uint8Array | CID): boolean;
export { isMultihash as multihash, isMultiaddr as multiaddr, isPeerMultiaddr as peerMultiaddr, isCID as cid };
//# sourceMappingURL=index.d.ts.map