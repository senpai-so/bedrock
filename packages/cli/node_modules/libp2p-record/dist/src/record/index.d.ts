export = Record;
/**
 * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord
 */
declare class Record {
    /**
     * Decode a protobuf encoded record.
     *
     * @param {Uint8Array} raw
     */
    static deserialize(raw: Uint8Array): import(".");
    /**
     * Create a record from the raw object returned from the protobuf library.
     *
     * @param {{ [k: string]: any }} obj
     */
    static fromDeserialized(obj: {
        [k: string]: any;
    }): import(".");
    /**
     * @param {Uint8Array} [key]
     * @param {Uint8Array} [value]
     * @param {Date} [timeReceived]
     */
    constructor(key?: Uint8Array | undefined, value?: Uint8Array | undefined, timeReceived?: Date | undefined);
    key: Uint8Array;
    value: Uint8Array;
    timeReceived: Date | undefined;
    serialize(): Uint8Array;
    /**
     * Return the object format ready to be given to the protobuf library.
     */
    prepareSerialize(): {
        key: Uint8Array;
        value: Uint8Array;
        timeReceived: string | undefined;
    };
}
declare namespace Record {
    export { ProtobufRecord };
}
type ProtobufRecord = {
    key: Uint8Array;
    value: Uint8Array;
    timeReceived: string;
};
//# sourceMappingURL=index.d.ts.map