/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Key} Key
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('./types').KeyTransform} KeyTransform
 */
/**
 * @template TEntry
 * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable
 */
/**
 * A datastore shim, that wraps around a given datastore, changing
 * the way keys look to the user, for example namespacing
 * keys, reversing them, etc.
 *
 * @implements {Datastore}
 */
export class KeyTransformDatastore extends BaseDatastore implements Datastore {
    /**
     * @param {Datastore} child
     * @param {KeyTransform} transform
     */
    constructor(child: Datastore, transform: KeyTransform);
    child: import("interface-datastore").Datastore;
    transform: import("./types").KeyTransform;
}
export type Datastore = import('interface-datastore').Datastore;
export type Options = import('interface-datastore').Options;
export type Batch = import('interface-datastore').Batch;
export type Query = import('interface-datastore').Query;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type Key = import('interface-datastore').Key;
export type Pair = import('interface-datastore').Pair;
export type KeyTransform = import('./types').KeyTransform;
export type AwaitIterable<TEntry> = import('interface-store').AwaitIterable<TEntry>;
import { BaseDatastore } from "./base.js";
//# sourceMappingURL=keytransform.d.ts.map