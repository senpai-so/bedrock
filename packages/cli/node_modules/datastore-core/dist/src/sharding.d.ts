/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').QueryFilter} QueryFilter
 * @typedef {import('interface-datastore').QueryOrder} QueryOrder
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').KeyQueryFilter} KeyQueryFilter
 * @typedef {import('interface-datastore').KeyQueryOrder} KeyQueryOrder
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('./types').Shard} Shard
 *
 */
/**
 * @template TValue
 * @typedef {import('interface-store').Await<TValue> } Await
 */
/**
 * @template TEntry
 * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable
 */
/**
 * Backend independent abstraction of go-ds-flatfs.
 *
 * Wraps another datastore such that all values are stored
 * sharded according to the given sharding function.
 */
export class ShardingDatastore extends BaseDatastore {
    /**
     * @deprecated
     * @param {Datastore} store
     * @param {Shard} shard
     */
    static createOrOpen(store: Datastore, shard: Shard): Promise<ShardingDatastore>;
    /**
     * @deprecated
     * @param {Datastore} store
     */
    static open(store: Datastore): Promise<ShardingDatastore>;
    /**
     * @param {Datastore} store
     * @param {Shard} shard
     */
    static create(store: Datastore, shard: Shard): Promise<import("./types").Shard>;
    /**
     * @param {Datastore} store
     * @param {Shard} shard
     */
    constructor(store: Datastore, shard: Shard);
    child: KeyTransformDatastore;
    shard: import("./types").Shard;
    /**
     * @param {Key} key
     */
    _convertKey(key: Key): Key;
    /**
     * @param {Key} key
     */
    _invertKey(key: Key): Key;
}
export type Datastore = import('interface-datastore').Datastore;
export type Options = import('interface-datastore').Options;
export type Batch = import('interface-datastore').Batch;
export type Query = import('interface-datastore').Query;
export type QueryFilter = import('interface-datastore').QueryFilter;
export type QueryOrder = import('interface-datastore').QueryOrder;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type KeyQueryFilter = import('interface-datastore').KeyQueryFilter;
export type KeyQueryOrder = import('interface-datastore').KeyQueryOrder;
export type Pair = import('interface-datastore').Pair;
export type Shard = import('./types').Shard;
export type Await<TValue> = import('interface-store').Await<TValue>;
export type AwaitIterable<TEntry> = import('interface-store').AwaitIterable<TEntry>;
import { BaseDatastore } from "./base.js";
import { KeyTransformDatastore } from "./keytransform.js";
import { Key } from "interface-datastore";
//# sourceMappingURL=sharding.d.ts.map