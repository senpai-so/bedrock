/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Key} Key
 * @typedef {import('interface-datastore').Pair} Pair
 */
/**
 * @template TEntry
 * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable
 */
/**
 * A datastore that can combine multiple stores. Puts and deletes
 * will write through to all datastores. Has and get will
 * try each store sequentially. Query will always try the
 * last one first.
 *
 */
export class TieredDatastore extends BaseDatastore {
    /**
     * @param {Datastore[]} stores
     */
    constructor(stores: Datastore[]);
    stores: import("interface-datastore").Datastore[];
}
export type Datastore = import('interface-datastore').Datastore;
export type Options = import('interface-datastore').Options;
export type Batch = import('interface-datastore').Batch;
export type Query = import('interface-datastore').Query;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type Key = import('interface-datastore').Key;
export type Pair = import('interface-datastore').Pair;
export type AwaitIterable<TEntry> = import('interface-store').AwaitIterable<TEntry>;
import { BaseDatastore } from "./base.js";
//# sourceMappingURL=tiered.d.ts.map