/**
 * @typedef {import('interface-store').Options} Options
 * @typedef {import('interface-datastore').Key} Key
 * @typedef {import('interface-datastore').Pair} Pair
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Batch} Batch
 */
/**
 * @template O
 * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable
 */
/**
 * @implements {Datastore}
 */
export class BaseDatastore implements Datastore {
    /**
     * @returns {Promise<void>}
     */
    open(): Promise<void>;
    /**
     * @returns {Promise<void>}
     */
    close(): Promise<void>;
    /**
     * @param {Key} key
     * @param {Uint8Array} val
     * @param {Options} [options]
     * @returns {Promise<void>}
     */
    put(key: Key, val: Uint8Array, options?: import("interface-store").Options | undefined): Promise<void>;
    /**
     * @param {Key} key
     * @param {Options} [options]
     * @returns {Promise<Uint8Array>}
     */
    get(key: Key, options?: import("interface-store").Options | undefined): Promise<Uint8Array>;
    /**
     * @param {Key} key
     * @param {Options} [options]
     * @returns {Promise<boolean>}
     */
    has(key: Key, options?: import("interface-store").Options | undefined): Promise<boolean>;
    /**
     * @param {Key} key
     * @param {Options} [options]
     * @returns {Promise<void>}
     */
    delete(key: Key, options?: import("interface-store").Options | undefined): Promise<void>;
    /**
     * @param {AwaitIterable<Pair>} source
     * @param {Options} [options]
     * @returns {AsyncIterable<Pair>}
     */
    putMany(source: AwaitIterable<Pair>, options?: import("interface-store").Options | undefined): AsyncIterable<Pair>;
    /**
     * @param {AwaitIterable<Key>} source
     * @param {Options} [options]
     * @returns {AsyncIterable<Uint8Array>}
     */
    getMany(source: AwaitIterable<Key>, options?: import("interface-store").Options | undefined): AsyncIterable<Uint8Array>;
    /**
     * @param {AwaitIterable<Key>} source
     * @param {Options} [options]
     * @returns {AsyncIterable<Key>}
     */
    deleteMany(source: AwaitIterable<Key>, options?: import("interface-store").Options | undefined): AsyncIterable<Key>;
    /**
     * @returns {Batch}
     */
    batch(): Batch;
    /**
     * Extending classes should override `query` or implement this method
     *
     * @param {Query} q
     * @param {Options} [options]
     * @returns {AsyncIterable<Pair>}
     */
    _all(q: Query, options?: import("interface-store").Options | undefined): AsyncIterable<Pair>;
    /**
     * Extending classes should override `queryKeys` or implement this method
     *
     * @param {KeyQuery} q
     * @param {Options} [options]
     * @returns {AsyncIterable<Key>}
     */
    _allKeys(q: KeyQuery, options?: import("interface-store").Options | undefined): AsyncIterable<Key>;
    /**
     * @param {Query} q
     * @param {Options} [options]
     */
    query(q: Query, options?: import("interface-store").Options | undefined): AsyncIterable<import("interface-datastore").Pair>;
    /**
     * @param {KeyQuery} q
     * @param {Options} [options]
     */
    queryKeys(q: KeyQuery, options?: import("interface-store").Options | undefined): AsyncIterable<import("interface-datastore").Key>;
}
export type Options = import('interface-store').Options;
export type Key = import('interface-datastore').Key;
export type Pair = import('interface-datastore').Pair;
export type Datastore = import('interface-datastore').Datastore;
export type Query = import('interface-datastore').Query;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type Batch = import('interface-datastore').Batch;
export type AwaitIterable<O> = import('interface-store').AwaitIterable<O>;
//# sourceMappingURL=base.d.ts.map