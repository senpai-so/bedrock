/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('./types').KeyTransform} KeyTransform
 */
/**
 * Wraps a given datastore into a keytransform which
 * makes a given prefix transparent.
 *
 * For example, if the prefix is `new Key(/hello)` a call
 * to `store.put(new Key('/world'), mydata)` would store the data under
 * `/hello/world`.
 *
 */
export class NamespaceDatastore extends KeyTransformDatastore {
    /**
     * @param {Datastore} child
     * @param {Key} prefix
     */
    constructor(child: Datastore, prefix: Key);
    prefix: Key;
}
export type Datastore = import('interface-datastore').Datastore;
export type Query = import('interface-datastore').Query;
export type KeyQuery = import('interface-datastore').KeyQuery;
export type Options = import('interface-datastore').Options;
export type Batch = import('interface-datastore').Batch;
export type KeyTransform = import('./types').KeyTransform;
import { KeyTransformDatastore } from "./keytransform.js";
import { Key } from "interface-datastore";
//# sourceMappingURL=namespace.d.ts.map