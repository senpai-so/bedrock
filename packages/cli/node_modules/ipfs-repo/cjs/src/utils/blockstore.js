'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var key = require('interface-datastore/key');
var multiformats = require('multiformats');
var raw = require('multiformats/codecs/raw');
var errCode = require('err-code');
var base32 = require('multiformats/bases/base32');
var Digest = require('multiformats/hashes/digest');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var raw__namespace = /*#__PURE__*/_interopNamespace(raw);
var errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);
var Digest__namespace = /*#__PURE__*/_interopNamespace(Digest);

function cidToKey(c) {
  const cid = multiformats.CID.asCID(c);
  if (cid == null) {
    throw errCode__default["default"](new Error('Not a valid cid'), 'ERR_INVALID_CID');
  }
  const encoded = base32.base32.encode(cid.multihash.bytes);
  return new key.Key('/' + encoded.slice(1).toUpperCase(), false);
}
function keyToCid(key) {
  return multiformats.CID.createV1(raw__namespace.code, keyToMultihash(key));
}
function keyToMultihash(key) {
  return Digest__namespace.decode(base32.base32.decode(`b${ key.toString().toLowerCase().substring(1) }`));
}

exports.cidToKey = cidToKey;
exports.keyToCid = keyToCid;
exports.keyToMultihash = keyToMultihash;
