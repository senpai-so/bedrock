'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var errors = require('../errors.js');
var debug = require('debug');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);

const log = debug__default["default"]('ipfs:repo:lock:memory');
const lockFile = 'repo.lock';
const LOCKS = {};
async function lock(dir) {
  const file = dir + '/' + lockFile;
  log('locking %s', file);
  if (LOCKS[file] === true) {
    throw new errors.LockExistsError(`Lock already being held for file: ${ file }`);
  }
  LOCKS[file] = true;
  const closer = {
    async close() {
      if (LOCKS[file]) {
        delete LOCKS[file];
      }
    }
  };
  return closer;
}
async function locked(dir) {
  const file = dir + '/' + lockFile;
  log(`checking lock: ${ file }`);
  return Boolean(LOCKS[file]);
}
const MemoryLock = {
  lock,
  locked
};

exports.MemoryLock = MemoryLock;
