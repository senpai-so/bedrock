import { CID } from 'multiformats/cid';
import errCode from 'err-code';
import debug from 'debug';
import first from 'it-first';
import { createUnsafe } from 'multiformats/block';
import * as cborg from 'cborg';
import * as dagPb from '@ipld/dag-pb';
import {
  cidToKey,
  keyToMultihash
} from './utils/blockstore.js';
import { walkDag } from './utils/walk-dag.js';
import { PinTypes } from './pin-types.js';
function invalidPinTypeErr(type) {
  const errMsg = `Invalid type '${ type }', must be one of {direct, indirect, recursive, all}`;
  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE');
}
export class PinManager {
  constructor({pinstore, blockstore, loadCodec}) {
    this.pinstore = pinstore;
    this.blockstore = blockstore;
    this.loadCodec = loadCodec;
    this.log = debug('ipfs:repo:pin');
    this.directPins = new Set();
    this.recursivePins = new Set();
  }
  async pinDirectly(cid, options = {}) {
    await this.blockstore.get(cid, options);
    const pin = { depth: 0 };
    if (cid.version !== 0) {
      pin.version = cid.version;
    }
    if (cid.code !== dagPb.code) {
      pin.codec = cid.code;
    }
    if (options.metadata) {
      pin.metadata = options.metadata;
    }
    return this.pinstore.put(cidToKey(cid), cborg.encode(pin));
  }
  unpin(cid, options) {
    return this.pinstore.delete(cidToKey(cid), options);
  }
  async pinRecursively(cid, options = {}) {
    await this.fetchCompleteDag(cid, options);
    const pin = { depth: Infinity };
    if (cid.version !== 0) {
      pin.version = cid.version;
    }
    if (cid.code !== dagPb.code) {
      pin.codec = cid.code;
    }
    if (options.metadata) {
      pin.metadata = options.metadata;
    }
    await this.pinstore.put(cidToKey(cid), cborg.encode(pin));
  }
  async *directKeys(options) {
    for await (const entry of this.pinstore.query({
        filters: [entry => {
            const pin = cborg.decode(entry.value);
            return pin.depth === 0;
          }]
      })) {
      const pin = cborg.decode(entry.value);
      const version = pin.version || 0;
      const codec = pin.codec != null ? pin.codec : dagPb.code;
      const multihash = keyToMultihash(entry.key);
      yield {
        cid: CID.create(version, codec, multihash),
        metadata: pin.metadata
      };
    }
  }
  async *recursiveKeys(options) {
    for await (const entry of this.pinstore.query({
        filters: [entry => {
            const pin = cborg.decode(entry.value);
            return pin.depth === Infinity;
          }]
      })) {
      const pin = cborg.decode(entry.value);
      const version = pin.version || 0;
      const codec = pin.codec != null ? pin.codec : dagPb.code;
      const multihash = keyToMultihash(entry.key);
      yield {
        cid: CID.create(version, codec, multihash),
        metadata: pin.metadata
      };
    }
  }
  async *indirectKeys(options) {
    for await (const {cid} of this.recursiveKeys()) {
      for await (const childCid of walkDag(cid, this.blockstore, this.loadCodec, options)) {
        const types = [PinTypes.recursive];
        const result = await this.isPinnedWithType(childCid, types);
        if (result.pinned) {
          continue;
        }
        yield childCid;
      }
    }
  }
  async isPinnedWithType(cid, types, options) {
    if (!Array.isArray(types)) {
      types = [types];
    }
    const all = types.includes(PinTypes.all);
    const direct = types.includes(PinTypes.direct);
    const recursive = types.includes(PinTypes.recursive);
    const indirect = types.includes(PinTypes.indirect);
    if (recursive || direct || all) {
      const result = await first(this.pinstore.query({
        prefix: cidToKey(cid).toString(),
        filters: [entry => {
            if (all) {
              return true;
            }
            const pin = cborg.decode(entry.value);
            return types.includes(pin.depth === 0 ? PinTypes.direct : PinTypes.recursive);
          }],
        limit: 1
      }));
      if (result) {
        const pin = cborg.decode(result.value);
        return {
          cid,
          pinned: true,
          reason: pin.depth === 0 ? PinTypes.direct : PinTypes.recursive,
          metadata: pin.metadata
        };
      }
    }
    const self = this;
    async function* findChild(key, source) {
      for await (const {cid: parentCid} of source) {
        for await (const childCid of walkDag(parentCid, self.blockstore, self.loadCodec)) {
          if (childCid.equals(key)) {
            yield parentCid;
            return;
          }
        }
      }
    }
    if (all || indirect) {
      const parentCid = await first(findChild(cid, this.recursiveKeys()));
      if (parentCid) {
        return {
          cid,
          pinned: true,
          reason: PinTypes.indirect,
          parent: parentCid
        };
      }
    }
    return {
      cid,
      pinned: false
    };
  }
  async fetchCompleteDag(cid, options) {
    const seen = new Set();
    const walkDag = async (cid, options) => {
      if (seen.has(cid.toString())) {
        return;
      }
      seen.add(cid.toString());
      const bytes = await this.blockstore.get(cid, options);
      const codec = await this.loadCodec(cid.code);
      const block = createUnsafe({
        bytes,
        cid,
        codec
      });
      await Promise.all([...block.links()].map(([, childCid]) => walkDag(childCid, options)));
    };
    await walkDag(cid, options);
  }
  static checkPinType(type) {
    if (typeof type !== 'string' || !Object.keys(PinTypes).includes(type)) {
      throw invalidPinTypeErr(type);
    }
    return true;
  }
}