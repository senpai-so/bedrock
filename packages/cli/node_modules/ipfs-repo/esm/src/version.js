import { Key } from 'interface-datastore/key';
import debug from 'debug';
import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
import {
  getWithFallback,
  hasWithFallback
} from './utils/level.js';
const log = debug('ipfs:repo:version');
const versionKey = new Key('version');
export function version(store) {
  return {
    async exists() {
      return hasWithFallback(versionKey, store.has.bind(store), store);
    },
    async get() {
      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);
      return parseInt(uint8ArrayToString(buf), 10);
    },
    set(version) {
      return store.put(versionKey, uint8ArrayFromString(String(version)));
    },
    async check(expected) {
      const version = await this.get();
      log('comparing version: %s and %s', version, expected);
      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;
      return version === expected || compatibleVersion;
    }
  };
}