import { CID } from 'multiformats/cid';
import { UnixFS } from 'ipfs-unixfs';
import * as dagPB from '@ipld/dag-pb';
import { sha256 } from 'multiformats/hashes/sha2';
import debug from 'debug';
import errCode from 'err-code';
import { MFS_ROOT_KEY } from '../../../utils.js';
const log = debug('ipfs:mfs:utils:with-mfs-root');
export async function loadMfsRoot(context, options) {
  if (options && options.signal && options.signal.aborted) {
    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
  }
  await context.repo.datastore.open();
  let cid;
  try {
    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);
    cid = CID.decode(buf);
  } catch (err) {
    if (err.code !== 'ERR_NOT_FOUND') {
      throw err;
    }
    log('Creating new MFS root');
    const buf = dagPB.encode({
      Data: new UnixFS({ type: 'directory' }).marshal(),
      Links: []
    });
    const hash = await sha256.digest(buf);
    cid = CID.createV0(hash);
    await context.repo.blocks.put(cid, buf);
    if (options && options.signal && options.signal.aborted) {
      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
    }
    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);
  }
  log(`Loaded MFS root /ipfs/${ cid }`);
  return cid;
}