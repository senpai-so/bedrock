import { exporter } from 'ipfs-unixfs-exporter';
import mergeOpts from 'merge-options';
import { toMfsPath } from './utils/to-mfs-path.js';
import errCode from 'err-code';
import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
const mergeOptions = mergeOpts.bind({ ignoreUndefined: true });
const defaultOptions = {
  offset: 0,
  length: Infinity
};
export function createRead(context) {
  function mfsRead(path, options = {}) {
    options = mergeOptions(defaultOptions, options);
    return {
      [Symbol.asyncIterator]: async function* read() {
        const mfsPath = await toMfsPath(context, path, options);
        const result = await exporter(mfsPath.mfsPath, context.repo.blocks);
        if (result.type !== 'file') {
          throw errCode(new Error(`${ path } was not a file`), 'ERR_NOT_FILE');
        }
        if (!result.content) {
          throw errCode(new Error(`Could not load content stream from ${ path }`), 'ERR_NO_CONTENT');
        }
        for await (const buf of result.content({
            offset: options.offset,
            length: options.length
          })) {
          yield buf;
        }
      }
    };
  }
  return withTimeoutOption(mfsRead);
}