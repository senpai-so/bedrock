import { exporter } from 'ipfs-unixfs-exporter';
import { toMfsPath } from './utils/to-mfs-path.js';
import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
import map from 'it-map';
const toOutput = fsEntry => {
  const output = {
    cid: fsEntry.cid,
    name: fsEntry.name,
    type: fsEntry.type === 'directory' ? 'directory' : 'file',
    size: fsEntry.size
  };
  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {
    output.mode = fsEntry.unixfs.mode;
    output.mtime = fsEntry.unixfs.mtime;
  }
  return output;
};
export function createLs(context) {
  async function* mfsLs(path, options = {}) {
    const mfsPath = await toMfsPath(context, path, options);
    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks);
    if (fsEntry.type === 'directory') {
      yield* map(fsEntry.content(options), toOutput);
      return;
    }
    yield toOutput(fsEntry);
  }
  return withTimeoutOption(mfsLs);
}