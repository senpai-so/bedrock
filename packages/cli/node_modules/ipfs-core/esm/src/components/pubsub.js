import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
import errCode from 'err-code';
import { NotEnabledError } from '../errors.js';
import get from 'dlv';
export function createPubsub({network, config}) {
  const isEnabled = get(config || {}, 'Pubsub.Enabled', true);
  return {
    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,
    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,
    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,
    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,
    peers: isEnabled ? withTimeoutOption(peers) : notEnabled
  };
  async function subscribe(topic, handler, options = {}) {
    const {libp2p} = await network.use(options);
    return libp2p.pubsub.subscribe(topic, handler, options);
  }
  async function unsubscribe(topic, handler, options = {}) {
    const {libp2p} = await network.use(options);
    libp2p.pubsub.unsubscribe(topic, handler, options);
  }
  async function publish(topic, data, options = {}) {
    const {libp2p} = await network.use(options);
    if (!data) {
      throw errCode(new Error('argument "data" is required'), 'ERR_ARG_REQUIRED');
    }
    await libp2p.pubsub.publish(topic, data);
  }
  async function ls(options = {}) {
    const {libp2p} = await network.use(options);
    return libp2p.pubsub.getTopics();
  }
  async function peers(topic, options = {}) {
    const {libp2p} = await network.use(options);
    return libp2p.pubsub.getSubscribers(topic);
  }
}
const notEnabled = async () => {
  throw new NotEnabledError('pubsub not enabled');
};