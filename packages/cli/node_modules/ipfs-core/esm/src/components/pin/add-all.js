import { resolvePath } from '../../utils.js';
import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';
import { PinTypes } from 'ipfs-repo/pin-types';
export function createAddAll({repo, codecs}) {
  async function* addAll(source, options = {}) {
    const pinAdd = async function* () {
      for await (const {path, recursive, metadata} of normaliseInput(source)) {
        const {cid} = await resolvePath(repo, codecs, path);
        const {reason} = await repo.pins.isPinnedWithType(cid, [
          PinTypes.recursive,
          PinTypes.direct
        ]);
        if (reason === 'recursive' && !recursive) {
          throw new Error(`${ cid } already pinned recursively`);
        }
        if (recursive) {
          await repo.pins.pinRecursively(cid, { metadata });
        } else {
          await repo.pins.pinDirectly(cid, { metadata });
        }
        yield cid;
      }
    };
    const lock = Boolean(options.lock);
    if (!lock) {
      yield* pinAdd();
      return;
    }
    const release = await repo.gcLock.readLock();
    try {
      yield* pinAdd();
    } finally {
      release();
    }
  }
  return withTimeoutOption(addAll);
}