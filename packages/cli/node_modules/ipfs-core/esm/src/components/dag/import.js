import { CarBlockIterator } from '@ipld/car/iterator';
import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
import itPeekable from 'it-peekable';
import drain from 'it-drain';
import map from 'it-map';
import debug from 'debug';
const log = debug('ipfs:components:dag:import');
export function createImport({repo}) {
  async function* dagImport(sources, options = {}) {
    const release = await repo.gcLock.readLock();
    try {
      const abortOptions = {
        signal: options.signal,
        timeout: options.timeout
      };
      const peekable = itPeekable(sources);
      const {value, done} = await peekable.peek();
      if (done) {
        return;
      }
      if (value) {
        peekable.push(value);
      }
      let cars;
      if (value instanceof Uint8Array) {
        cars = [peekable];
      } else {
        cars = peekable;
      }
      for await (const car of cars) {
        const roots = await importCar(repo, abortOptions, car);
        if (options.pinRoots !== false) {
          for (const cid of roots) {
            let pinErrorMsg = '';
            try {
              if (await repo.blocks.has(cid)) {
                log(`Pinning root ${ cid }`);
                await repo.pins.pinRecursively(cid);
              } else {
                pinErrorMsg = 'blockstore: block not found';
              }
            } catch (err) {
              pinErrorMsg = err.message;
            }
            yield {
              root: {
                cid,
                pinErrorMsg
              }
            };
          }
        }
      }
    } finally {
      release();
    }
  }
  return withTimeoutOption(dagImport);
}
async function importCar(repo, options, source) {
  const reader = await CarBlockIterator.fromIterable(source);
  const roots = await reader.getRoots();
  await drain(repo.blocks.putMany(map(reader, ({
    cid: key,
    bytes: value
  }) => {
    log(`Import block ${ key }`);
    return {
      key,
      value
    };
  }), { signal: options.signal }));
  return roots;
}