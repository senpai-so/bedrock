import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';
import first from 'it-first';
import last from 'it-last';
import { resolve } from '../../utils.js';
import errCode from 'err-code';
export function createGet({codecs, repo, preload}) {
  const get = async function get(cid, options = {}) {
    if (options.preload !== false) {
      preload(cid);
    }
    if (options.path) {
      const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, repo, options)) : await last(resolve(cid, options.path, codecs, repo, options));
      const result = entry;
      if (!result) {
        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');
      }
      return result;
    }
    const codec = await codecs.getCodec(cid.code);
    const block = await repo.blocks.get(cid, options);
    const node = codec.decode(block);
    return {
      value: node,
      remainderPath: ''
    };
  };
  return withTimeoutOption(get);
}