import get from 'dlv';
import mergeOpts from 'merge-options';
import errCode from 'err-code';
import { routers } from 'ipfs-core-config/libp2p-pubsub-routers';
import DelegatedPeerRouter from 'libp2p-delegated-peer-routing';
import DelegatedContentRouter from 'libp2p-delegated-content-routing';
import { create as ipfsHttpClient } from 'ipfs-http-client';
import { Multiaddr } from 'multiaddr';
import { ipfsCore as pkgversion } from '../version.js';
import { libp2pConfig as getEnvLibp2pOptions } from 'ipfs-core-config/libp2p';
import bootstrap from 'libp2p-bootstrap';
import Libp2p from 'libp2p';
import * as ipns from 'ipns';
const mergeOptions = mergeOpts.bind({ ignoreUndefined: true });
export function createLibp2p({options = {}, peerId, multiaddrs = [], repo, keychainConfig = {}, config = {}}) {
  const {datastore, keys} = repo;
  const libp2pOptions = getLibp2pOptions({
    options,
    config,
    datastore,
    keys,
    keychainConfig,
    peerId,
    multiaddrs
  });
  if (typeof options.libp2p === 'function') {
    return options.libp2p({
      libp2pOptions,
      options,
      config,
      datastore,
      peerId
    });
  }
  return Libp2p.create(libp2pOptions);
}
function getLibp2pOptions({options, config, datastore, keys, keychainConfig, peerId, multiaddrs}) {
  const getPubsubRouter = () => {
    const router = get(config, 'Pubsub.Router') || 'gossipsub';
    if (!routers[router]) {
      throw errCode(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${ router } router.`), 'ERR_NOT_SUPPORTED');
    }
    return routers[router];
  };
  const libp2pDefaults = {
    datastore,
    peerId: peerId,
    modules: {}
  };
  const libp2pOptions = {
    modules: {
      pubsub: getPubsubRouter(),
      contentRouting: [],
      peerRouting: []
    },
    config: {
      peerDiscovery: {
        mdns: { enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true)) },
        webRTCStar: { enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true)) },
        bootstrap: { list: get(options, 'config.Bootstrap', get(config, 'Bootstrap', [])) }
      },
      relay: {
        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),
        hop: {
          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),
          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))
        }
      },
      dht: {
        enabled: get(config, 'Routing.Type', 'none') !== 'none',
        clientMode: get(config, 'Routing.Type', 'dht') !== 'dhtserver',
        kBucketSize: get(options, 'dht.kBucketSize', 20),
        validators: { ipns: ipns.validator }
      },
      pubsub: { enabled: get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true)) },
      nat: { enabled: !get(config, 'Swarm.DisableNatPortMap', false) }
    },
    addresses: {
      listen: multiaddrs.map(ma => ma.toString()),
      announce: get(options, 'addresses.announce', get(config, 'Addresses.Announce', [])),
      noAnnounce: get(options, 'addresses.noAnnounce', get(config, 'Addresses.NoAnnounce', []))
    },
    connectionManager: get(options, 'connectionManager', {
      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),
      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))
    }),
    keychain: {
      datastore: keys,
      ...keychainConfig
    },
    host: { agentVersion: `js-ipfs/${ pkgversion }` }
  };
  let constructorOptions = get(options, 'libp2p', undefined);
  if (typeof constructorOptions === 'function') {
    constructorOptions = undefined;
  }
  const libp2pConfig = mergeOptions(libp2pDefaults, getEnvLibp2pOptions(), libp2pOptions, constructorOptions);
  const bootstrapList = get(libp2pConfig, 'config.peerDiscovery.bootstrap.list', []);
  if (bootstrapList.length > 0) {
    libp2pConfig.modules.peerDiscovery.push(bootstrap);
  }
  const delegateHosts = get(options, 'config.Addresses.Delegates', get(config, 'Addresses.Delegates', []));
  if (delegateHosts.length > 0) {
    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)];
    const delegateAddr = new Multiaddr(delegateString).toOptions();
    const delegateApiOptions = {
      host: delegateAddr.host,
      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',
      port: delegateAddr.port
    };
    const delegateHttpClient = ipfsHttpClient(delegateApiOptions);
    libp2pOptions.modules.contentRouting = libp2pOptions.modules.contentRouting || [];
    libp2pOptions.modules.contentRouting.push(new DelegatedContentRouter(peerId, delegateHttpClient));
    libp2pOptions.modules.peerRouting = libp2pOptions.modules.peerRouting || [];
    libp2pOptions.modules.peerRouting.push(new DelegatedPeerRouter(delegateHttpClient));
  }
  return libp2pConfig;
}