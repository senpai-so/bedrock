import { createBitswap } from 'ipfs-bitswap';
import { createLibp2p } from './libp2p.js';
import { Multiaddr } from 'multiaddr';
import errCode from 'err-code';
import { BlockStorage } from '../block-storage.js';
export class Network {
  constructor(peerId, libp2p, bitswap, repo, blockstore) {
    this.peerId = peerId;
    this.libp2p = libp2p;
    this.bitswap = bitswap;
    this.repo = repo;
    this.blockstore = blockstore;
  }
  static async start({peerId, repo, print, hashers, options}) {
    if (repo.closed) {
      await repo.open();
    }
    const config = await repo.config.getAll();
    const libp2p = await createLibp2p({
      options,
      repo,
      peerId,
      multiaddrs: readAddrs(peerId, config),
      config,
      keychainConfig: undefined
    });
    if (libp2p.keychain) {
      await libp2p.loadKeychain();
    }
    await libp2p.start();
    for (const ma of libp2p.multiaddrs) {
      print(`Swarm listening on ${ ma }/p2p/${ peerId.toB58String() }`);
    }
    const bitswap = createBitswap(libp2p, repo.blocks, {
      statsEnabled: true,
      hashLoader: hashers
    });
    await bitswap.start();
    const blockstore = new BlockStorage(repo.blocks, bitswap);
    repo.blocks = blockstore;
    repo.pins.blockstore = blockstore;
    return new Network(peerId, libp2p, bitswap, repo, blockstore);
  }
  static async stop(network) {
    network.repo.blocks = network.blockstore.unwrap();
    network.repo.pins.blockstore = network.blockstore.unwrap();
    await Promise.all([
      network.bitswap.stop(),
      network.libp2p.stop()
    ]);
  }
}
const readAddrs = (peerId, config) => {
  const peerIdStr = peerId.toB58String();
  const addrs = [];
  const swarm = config.Addresses && config.Addresses.Swarm || [];
  for (const addr of swarm) {
    let ma = new Multiaddr(addr);
    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {
      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');
    }
    const maId = ma.getPeerId();
    if (maId && maId !== peerIdStr) {
      ma = ma.encapsulate(`/p2p/${ peerIdStr }`);
    }
    addrs.push(ma);
  }
  return addrs;
};
const WEBSOCKET_STAR_PROTO_CODE = 479;