/**
 * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Source} Source
 * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Pin} PinTarget
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 * @typedef {import('multiformats/cid').CID} CID
 */
/**
 * @template T
 * @typedef {Iterable<T>|AsyncIterable<T>} AwaitIterable
 */
/**
 * @param {Object} config
 * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs
 * @param {import('ipfs-repo').IPFSRepo} config.repo
 */
export function createAddAll({ repo, codecs }: {
    codecs: import('ipfs-core-utils/multicodecs').Multicodecs;
    repo: import('ipfs-repo').IPFSRepo;
}): (source: import("ipfs-core-types/src/utils").AwaitIterable<import("ipfs-core-types/src/pin").AddInput>, options?: import("ipfs-core-types/src/pin").AddAllOptions | undefined) => AsyncIterable<import("multiformats/cid").CID>;
export type Source = import('ipfs-core-utils/src/pins/normalise-input').Source;
export type PinTarget = import('ipfs-core-utils/src/pins/normalise-input').Pin;
export type AbortOptions = import('ipfs-core-types/src/utils').AbortOptions;
export type CID = import('multiformats/cid').CID;
export type AwaitIterable<T> = Iterable<T> | AsyncIterable<T>;
//# sourceMappingURL=add-all.d.ts.map