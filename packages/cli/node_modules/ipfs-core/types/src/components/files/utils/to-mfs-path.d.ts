export function toMfsPath(context: MfsContext, path: string | CID, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined): Promise<MfsPath>;
export type UnixFSEntry = import('ipfs-unixfs-exporter').UnixFSEntry;
export type ExporterOptions = import('ipfs-unixfs-exporter').ExporterOptions;
export type MfsContext = import('../').MfsContext;
export type FilePath = {
    type: 'mfs' | 'ipfs';
    entryType: 'file';
    depth: number;
    mfsPath: string;
    mfsDirectory: string;
    parts: string[];
    path: string;
    name: string;
    cid: CID;
    exists: boolean;
    unixfs: import('ipfs-unixfs').UnixFS;
    content: (options?: import("ipfs-unixfs-exporter/types/src/types").ExporterOptions | undefined) => AsyncIterable<Uint8Array>;
};
export type DirectoryPath = {
    type: 'mfs' | 'ipfs';
    entryType: 'directory';
    depth: number;
    mfsPath: string;
    mfsDirectory: string;
    parts: string[];
    path: string;
    name: string;
    cid: CID;
    exists: boolean;
    unixfs: import('ipfs-unixfs').UnixFS;
    content: (options?: import("ipfs-unixfs-exporter/types/src/types").ExporterOptions | undefined) => AsyncIterable<UnixFSEntry>;
};
export type ObjectPath = {
    type: 'mfs' | 'ipfs';
    entryType: 'object';
    depth: number;
    mfsPath: string;
    mfsDirectory: string;
    parts: string[];
    path: string;
    name: string;
    cid: CID;
    exists: boolean;
    content: (options?: import("ipfs-unixfs-exporter/types/src/types").ExporterOptions | undefined) => AsyncIterable<any>;
};
export type RawPath = {
    type: 'mfs' | 'ipfs';
    entryType: 'raw';
    depth: number;
    mfsPath: string;
    mfsDirectory: string;
    parts: string[];
    path: string;
    name: string;
    cid: CID;
    exists: boolean;
    content: (options?: import("ipfs-unixfs-exporter/types/src/types").ExporterOptions | undefined) => AsyncIterable<Uint8Array>;
};
export type IdentityPath = {
    type: 'mfs' | 'ipfs';
    entryType: 'identity';
    depth: number;
    mfsPath: string;
    mfsDirectory: string;
    parts: string[];
    path: string;
    name: string;
    cid: CID;
    exists: boolean;
    content: (options?: import("ipfs-unixfs-exporter/types/src/types").ExporterOptions | undefined) => AsyncIterable<Uint8Array>;
};
export type MfsPath = FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath;
import { CID } from "multiformats/cid";
//# sourceMappingURL=to-mfs-path.d.ts.map