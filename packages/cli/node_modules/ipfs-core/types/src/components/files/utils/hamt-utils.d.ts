export function updateHamtDirectory(context: MfsContext, links: PBLink[], bucket: Bucket<any>, options: {
    parent: PBNode;
    cidVersion: CIDVersion;
    flush: boolean;
    hashAlg: string;
}): Promise<{
    node: {
        Data: Uint8Array;
        Links: import("@ipld/dag-pb/src/interface").PBLink[];
    };
    cid: CID;
    size: number;
}>;
export function recreateHamtLevel(context: MfsContext, links: PBLink[], rootBucket: Bucket<any>, parentBucket: Bucket<any>, positionAtParent: number): Promise<Bucket<any>>;
export function recreateInitialHamtLevel(links: PBLink[]): Promise<Bucket<any>>;
export function addLinksToHamtBucket(context: MfsContext, links: PBLink[], bucket: Bucket<any>, rootBucket: Bucket<any>): Promise<void>;
export function toPrefix(position: number): string;
export function generatePath(context: MfsContext, fileName: string, rootNode: PBNode): Promise<{
    rootBucket: Bucket<any>;
    path: {
        bucket: Bucket<any>;
        prefix: string;
        node?: import("@ipld/dag-pb/src/interface").PBNode | undefined;
    }[];
}>;
export function createShard(context: MfsContext, contents: {
    name: string;
    size: number;
    cid: CID;
}[], options?: {
    mtime?: import("ipfs-unixfs/types/src/types").Mtime | undefined;
    mode?: number | undefined;
} | undefined): Promise<import("./dir-sharded.js").ImportResult>;
export type CIDVersion = import('multiformats/cid').CIDVersion;
export type Mtime = import('ipfs-unixfs').Mtime;
export type MfsContext = import('../').MfsContext;
export type PBNode = import('@ipld/dag-pb').PBNode;
export type PBLink = import('@ipld/dag-pb').PBLink;
import { Bucket } from "hamt-sharding";
import { CID } from "multiformats/cid";
//# sourceMappingURL=hamt-utils.d.ts.map