export class SwarmAPI {
    /**
     * @param {Object} config
     * @param {import('../../types').NetworkService} config.network
     */
    constructor({ network }: {
        network: import('../../types').NetworkService;
    });
    addrs: (options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/swarm").AddrsResult[]>;
    connect: (addr: string | import("multiaddr").Multiaddr, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<void>;
    disconnect: (addr: string | import("multiaddr").Multiaddr, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<void>;
    localAddrs: (options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("multiaddr").Multiaddr[]>;
    peers: (options?: import("ipfs-core-types/src/swarm").PeersOptions | undefined) => Promise<import("ipfs-core-types/src/swarm").PeersResult[]>;
}
//# sourceMappingURL=index.d.ts.map