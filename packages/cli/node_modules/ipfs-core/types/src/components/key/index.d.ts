/**
 * @typedef {import('libp2p/src/keychain')} Keychain
 */
export class KeyAPI {
    /**
     * @param {Object} config
     * @param {Keychain} config.keychain
     */
    constructor({ keychain }: {
        keychain: Keychain;
    });
    gen: (name: string, options?: import("ipfs-core-types/src/key").GenOptions | undefined) => Promise<import("ipfs-core-types/src/key").Key>;
    list: (options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/key").Key[]>;
    rm: (name: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/key").Key>;
    rename: (oldName: string, newName: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/key").RenameKeyResult>;
    export: (name: string, password: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<string>;
    import: (name: string, pem: string, password: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/key").Key>;
    info: (name: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => Promise<import("ipfs-core-types/src/key").Key>;
}
export type Keychain = import('libp2p/src/keychain');
//# sourceMappingURL=index.d.ts.map