/**
 * resolves the given path by parsing out protocol-specific entries
 * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node
 *
 * @param {Object} context
 * @param {import('../ipns').IPNSAPI} context.ipns
 * @param {import('ipfs-repo').IPFSRepo} context.repo
 * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs
 * @param {string} name
 * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]
 */
export function resolvePath({ ipns, repo, codecs }: {
    ipns: import('../ipns').IPNSAPI;
    repo: import('ipfs-repo').IPFSRepo;
    codecs: import('ipfs-core-utils/multicodecs').Multicodecs;
}, name: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined): Promise<any>;
//# sourceMappingURL=utils.d.ts.map