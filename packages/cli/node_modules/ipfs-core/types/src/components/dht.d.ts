/**
 * @param {Object} config
 * @param {import('../types').NetworkService} config.network
 * @param {import('ipfs-repo').IPFSRepo} config.repo
 * @param {PeerId} config.peerId
 */
export function createDht({ network, repo, peerId }: {
    network: import('../types').NetworkService;
    repo: import('ipfs-repo').IPFSRepo;
    peerId: PeerId;
}): {
    get: (key: string | Uint8Array, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
    put: (key: string | Uint8Array, value: Uint8Array, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
    findProvs: (cid: CID, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
    findPeer: (peerId: string, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
    provide: (cid: CID, options?: import("ipfs-core-types/src/dht").DHTProvideOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
    query: (peerId: string | CID, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/dht").QueryEvent>;
};
export type DHTQueryEvent = import('libp2p-kad-dht').QueryEvent;
export type QueryEvent = import('ipfs-core-types/src/dht').QueryEvent;
import PeerId from "peer-id";
//# sourceMappingURL=dht.d.ts.map