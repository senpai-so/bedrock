/**
 * @param {Object} config
 * @param {import('../types').NetworkService} config.network
 * @param {import('peer-id')} config.peerId
 * @param {import('ipfs-repo').IPFSRepo} config.repo
 * @param {import('../types').Print} config.print
 * @param {import('../types').Preload} config.preload
 * @param {import('../types').MfsPreload} config.mfsPreload
 * @param {import('./ipns').IPNSAPI} config.ipns
 * @param {import('libp2p/src/keychain')} config.keychain
 * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers
 * @param {import('../types').Options} config.options
 */
export function createStart({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }: {
    network: import('../types').NetworkService;
    peerId: import('peer-id');
    repo: import('ipfs-repo').IPFSRepo;
    print: import('../types').Print;
    preload: import('../types').Preload;
    mfsPreload: import('../types').MfsPreload;
    ipns: import('./ipns').IPNSAPI;
    keychain: import('libp2p/src/keychain');
    hashers: import('ipfs-core-utils/multihashes').Multihashes;
    options: import('../types').Options;
}): () => Promise<void>;
//# sourceMappingURL=start.d.ts.map