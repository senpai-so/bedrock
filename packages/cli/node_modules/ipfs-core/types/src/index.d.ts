/**
 * @typedef {import('ipfs-core-types').IPFS} IPFS
 * @typedef {import('./types').Options} Options
 * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn
 * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs
 * @typedef {import('./types').InitOptions} InitOptions
 * @typedef {import('./types').RelayOptions} RelayOptions
 * @typedef {import('./types').PreloadOptions} PreloadOptions
 * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions
 * @typedef {import('./types').Preload} Preload
 * @typedef {import('./types').MfsPreload} MfsPreload
 * @typedef {import('./types').LoadBaseFn} LoadBaseFn
 * @typedef {import('./types').LoadCodecFn} LoadCodecFn
 * @typedef {import('./types').LoadHasherFn} LoadHasherFn
 * @typedef {import('./types').IPLDOptions} IPLDOptions
 */
export const create: typeof createImport;
export const crypto: typeof cryptoImport;
export const isIPFS: typeof isIPFSImport;
export const CID: typeof CIDImport;
export const multiaddr: typeof Multiaddr;
export const PeerId: typeof PeerIdImport;
export const globSource: typeof globSourceImport;
export const urlSource: typeof urlSourceImport;
export type IPFS = import('ipfs-core-types').IPFS;
export type Options = import('./types').Options;
export type Libp2pFactoryFn = import('./types').Libp2pFactoryFn;
export type Libp2pFactoryFnArgs = import('./types').Libp2pFactoryFnArgs;
export type InitOptions = import('./types').InitOptions;
export type RelayOptions = import('./types').RelayOptions;
export type PreloadOptions = import('./types').PreloadOptions;
export type ExperimentalOptions = import('./types').ExperimentalOptions;
export type Preload = import('./types').Preload;
export type MfsPreload = import('./types').MfsPreload;
export type LoadBaseFn = import('./types').LoadBaseFn;
export type LoadCodecFn = import('./types').LoadCodecFn;
export type LoadHasherFn = import('./types').LoadHasherFn;
export type IPLDOptions = import('./types').IPLDOptions;
import { create as createImport } from "./components/index.js";
import cryptoImport from "libp2p-crypto";
import isIPFSImport from "is-ipfs";
import { CID as CIDImport } from "multiformats/cid";
import { Multiaddr } from "multiaddr";
import PeerIdImport from "peer-id";
import globSourceImport from "ipfs-utils/src/files/glob-source.js";
import urlSourceImport from "ipfs-utils/src/files/url-source.js";
//# sourceMappingURL=index.d.ts.map