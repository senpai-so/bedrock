export const OFFLINE_ERROR: "This command must be run in online mode. Try running 'ipfs daemon' first.";
export const MFS_ROOT_KEY: Key;
export const MFS_MAX_CHUNK_SIZE: 262144;
export const MFS_MAX_LINKS: 174;
export function normalizePath(pathStr: string | CID): string;
export function normalizeCidPath(path: Uint8Array | CID | string): string;
export function resolvePath(repo: import('ipfs-repo').IPFSRepo, codecs: import('ipfs-core-utils/multicodecs').Multicodecs, ipfsPath: CID | string | Uint8Array, options?: {
    path?: string | undefined;
    signal?: AbortSignal | undefined;
} | undefined): Promise<{
    cid: CID;
    remainderPath: string;
}>;
export function mapFile(file: UnixFSEntry): import("ipfs-core-types/src/root").IPFSEntry;
export function withTimeout<T>(promise: T | Promise<T>, _options?: import("ipfs-core-types/src/utils").AbortOptions | undefined): Promise<T>;
export function resolve(cid: CID, path: string, codecs: import('ipfs-core-utils/src/multicodecs').Multicodecs, repo: import('ipfs-repo').IPFSRepo, options?: import("ipfs-core-types/src/utils").AbortOptions | undefined): AsyncGenerator<{
    value: any;
    remainderPath: string;
}, void, unknown>;
export type AbortOptions = import('ipfs-core-types/src/utils').AbortOptions;
export type PBLink = import('@ipld/dag-pb').PBLink;
export type UnixFSEntry = import('ipfs-unixfs-exporter').UnixFSEntry;
import { Key } from "interface-datastore/key";
import { CID } from "multiformats/cid";
//# sourceMappingURL=utils.d.ts.map