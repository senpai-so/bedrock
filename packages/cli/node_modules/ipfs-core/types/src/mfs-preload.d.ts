/**
 * @typedef {PreloadOptions & MFSPreloadOptions} Options
 * @typedef {Object} MFSPreloadOptions
 * @property {number} [interval]
 * @typedef {import('./types').PreloadOptions} PreloadOptions
 */
/**
 * @param {Object} config
 * @param {import('./types').Preload} config.preload
 * @param {import('ipfs-core-types/src/files').API} config.files
 * @param {Options} [config.options]
 */
export function createMfsPreloader({ preload, files, options }: {
    preload: import('./types').Preload;
    files: import('ipfs-core-types/src/files').API;
    options?: Options | undefined;
}): {
    /**
     * @returns {Promise<void>}
     */
    start(): Promise<void>;
    /**
     * @returns {void}
     */
    stop(): void;
};
export type Options = PreloadOptions & MFSPreloadOptions;
export type MFSPreloadOptions = {
    interval?: number | undefined;
};
export type PreloadOptions = import('./types').PreloadOptions;
//# sourceMappingURL=mfs-preload.d.ts.map