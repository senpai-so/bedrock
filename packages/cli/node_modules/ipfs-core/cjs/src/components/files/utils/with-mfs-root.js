'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var cid = require('multiformats/cid');
var ipfsUnixfs = require('ipfs-unixfs');
var dagPB = require('@ipld/dag-pb');
var sha2 = require('multiformats/hashes/sha2');
var debug = require('debug');
var errCode = require('err-code');
var utils = require('../../../utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);
var errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);

const log = debug__default["default"]('ipfs:mfs:utils:with-mfs-root');
async function loadMfsRoot(context, options) {
  if (options && options.signal && options.signal.aborted) {
    throw errCode__default["default"](new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
  }
  await context.repo.datastore.open();
  let cid$1;
  try {
    const buf = await context.repo.datastore.get(utils.MFS_ROOT_KEY);
    cid$1 = cid.CID.decode(buf);
  } catch (err) {
    if (err.code !== 'ERR_NOT_FOUND') {
      throw err;
    }
    log('Creating new MFS root');
    const buf = dagPB__namespace.encode({
      Data: new ipfsUnixfs.UnixFS({ type: 'directory' }).marshal(),
      Links: []
    });
    const hash = await sha2.sha256.digest(buf);
    cid$1 = cid.CID.createV0(hash);
    await context.repo.blocks.put(cid$1, buf);
    if (options && options.signal && options.signal.aborted) {
      throw errCode__default["default"](new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
    }
    await context.repo.datastore.put(utils.MFS_ROOT_KEY, cid$1.bytes);
  }
  log(`Loaded MFS root /ipfs/${ cid$1 }`);
  return cid$1;
}

exports.loadMfsRoot = loadMfsRoot;
