'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var debug = require('debug');
var addLink = require('./add-link.js');
var dagPB = require('@ipld/dag-pb');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);

const log = debug__default["default"]('ipfs:mfs:utils:update-tree');
const defaultOptions = { shardSplitThreshold: 1000 };
async function updateTree(context, trail, options) {
  options = Object.assign({}, defaultOptions, options);
  log('Trail', trail);
  trail = trail.slice().reverse();
  let index = 0;
  let child;
  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {
    const node = dagPB.decode(block);
    const cid = trail[index].cid;
    const name = trail[index].name;
    index++;
    if (!child) {
      child = {
        cid,
        name,
        size: block.length
      };
      continue;
    }
    const result = await addLink.addLink(context, {
      parent: node,
      name: child.name,
      cid: child.cid,
      size: child.size,
      flush: options.flush,
      shardSplitThreshold: options.shardSplitThreshold,
      hashAlg: options.hashAlg,
      cidVersion: options.cidVersion
    });
    child = {
      cid: result.cid,
      name,
      size: result.size
    };
  }
  const {cid} = child;
  log(`Final CID ${ cid }`);
  return cid;
}

exports.updateTree = updateTree;
