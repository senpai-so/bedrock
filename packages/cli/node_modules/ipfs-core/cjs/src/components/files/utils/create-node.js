'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ipfsUnixfs = require('ipfs-unixfs');
var dagPB = require('@ipld/dag-pb');
var cid = require('multiformats/cid');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);

async function createNode(context, type, options) {
  const metadata = new ipfsUnixfs.UnixFS({
    type,
    mode: options.mode,
    mtime: options.mtime
  });
  const hasher = await context.hashers.getHasher(options.hashAlg);
  const node = {
    Data: metadata.marshal(),
    Links: []
  };
  const buf = dagPB__namespace.encode(node);
  const hash = await hasher.digest(buf);
  const cid$1 = cid.CID.create(options.cidVersion, dagPB__namespace.code, hash);
  if (options.flush) {
    await context.repo.blocks.put(cid$1, buf);
  }
  return {
    cid: cid$1,
    node
  };
}

exports.createNode = createNode;
