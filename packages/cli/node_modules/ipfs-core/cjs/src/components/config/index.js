'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');
var debug = require('debug');
var profiles = require('./profiles.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);

const log = debug__default["default"]('ipfs:core:config');
function createConfig({repo}) {
  return {
    getAll: withTimeoutOption.withTimeoutOption(getAll),
    get: withTimeoutOption.withTimeoutOption(get),
    set: withTimeoutOption.withTimeoutOption(set),
    replace: withTimeoutOption.withTimeoutOption(replace),
    profiles: {
      apply: withTimeoutOption.withTimeoutOption(applyProfile),
      list: withTimeoutOption.withTimeoutOption(listProfiles)
    }
  };
  async function getAll(options = {}) {
    return repo.config.getAll(options);
  }
  async function get(key, options) {
    if (!key) {
      return Promise.reject(new Error('key argument is required'));
    }
    return repo.config.get(key, options);
  }
  async function set(key, value, options) {
    return repo.config.set(key, value, options);
  }
  async function replace(value, options) {
    return repo.config.replace(value, options);
  }
  async function applyProfile(profileName, options = { dryRun: false }) {
    const {dryRun} = options;
    const profile = profiles.profiles[profileName];
    if (!profile) {
      throw new Error(`No profile with name '${ profileName }' exists`);
    }
    try {
      const oldCfg = await repo.config.getAll(options);
      let newCfg = JSON.parse(JSON.stringify(oldCfg));
      newCfg = profile.transform(newCfg);
      if (!dryRun) {
        await repo.config.replace(newCfg, options);
      }
      delete oldCfg.Identity.PrivKey;
      delete newCfg.Identity.PrivKey;
      return {
        original: oldCfg,
        updated: newCfg
      };
    } catch (err) {
      log(err);
      throw new Error(`Could not apply profile '${ profileName }' to config: ${ err.message }`);
    }
  }
}
async function listProfiles(_options) {
  return Object.keys(profiles.profiles).map(name => ({
    name,
    description: profiles.profiles[name].description
  }));
}

exports.createConfig = createConfig;
