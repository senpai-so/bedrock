'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');
var first = require('it-first');
var last = require('it-last');
var utils = require('../../utils.js');
var errCode = require('err-code');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var first__default = /*#__PURE__*/_interopDefaultLegacy(first);
var last__default = /*#__PURE__*/_interopDefaultLegacy(last);
var errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);

function createGet({codecs, repo, preload}) {
  const get = async function get(cid, options = {}) {
    if (options.preload !== false) {
      preload(cid);
    }
    if (options.path) {
      const entry = options.localResolve ? await first__default["default"](utils.resolve(cid, options.path, codecs, repo, options)) : await last__default["default"](utils.resolve(cid, options.path, codecs, repo, options));
      const result = entry;
      if (!result) {
        throw errCode__default["default"](new Error('Not found'), 'ERR_NOT_FOUND');
      }
      return result;
    }
    const codec = await codecs.getCodec(cid.code);
    const block = await repo.blocks.get(cid, options);
    const node = codec.decode(block);
    return {
      value: node,
      remainderPath: ''
    };
  };
  return withTimeoutOption.withTimeoutOption(get);
}

exports.createGet = createGet;
