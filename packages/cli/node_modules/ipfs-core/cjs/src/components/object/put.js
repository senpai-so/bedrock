'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dagPB = require('@ipld/dag-pb');
var cid = require('multiformats/cid');
var sha2 = require('multiformats/hashes/sha2');
var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);

function createPut({repo, preload}) {
  async function put(obj, options = {}) {
    const release = await repo.gcLock.readLock();
    try {
      const buf = dagPB__namespace.encode(obj);
      const hash = await sha2.sha256.digest(buf);
      const cid$1 = cid.CID.createV1(dagPB__namespace.code, hash);
      await repo.blocks.put(cid$1, buf, { signal: options.signal });
      if (options.preload !== false) {
        preload(cid$1);
      }
      if (options.pin) {
        await repo.pins.pinRecursively(cid$1, { signal: options.signal });
      }
      return cid$1;
    } finally {
      release();
    }
  }
  return withTimeoutOption.withTimeoutOption(put);
}

exports.createPut = createPut;
