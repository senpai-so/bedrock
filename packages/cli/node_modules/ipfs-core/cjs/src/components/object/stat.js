'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dagPB = require('@ipld/dag-pb');
var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');
var get = require('./get.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);

function createStat({repo, preload}) {
  const get$1 = get.createGet({
    repo,
    preload
  });
  async function stat(cid, options = {}) {
    const node = await get$1(cid, options);
    const serialized = dagPB__namespace.encode(node);
    const blockSize = serialized.length;
    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);
    return {
      Hash: cid,
      NumLinks: node.Links.length,
      BlockSize: blockSize,
      LinksSize: blockSize - (node.Data || []).length,
      DataSize: (node.Data || []).length,
      CumulativeSize: blockSize + linkLength
    };
  }
  return withTimeoutOption.withTimeoutOption(stat);
}

exports.createStat = createStat;
