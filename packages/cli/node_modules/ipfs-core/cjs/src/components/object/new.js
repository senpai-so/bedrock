'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dagPB = require('@ipld/dag-pb');
var sha2 = require('multiformats/hashes/sha2');
var ipfsUnixfs = require('ipfs-unixfs');
var withTimeoutOption = require('ipfs-core-utils/with-timeout-option');
var cid = require('multiformats/cid');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);

function createNew({repo, preload}) {
  async function _new(options = {}) {
    let data;
    if (options.template) {
      if (options.template === 'unixfs-dir') {
        data = new ipfsUnixfs.UnixFS({ type: 'directory' }).marshal();
      } else {
        throw new Error('unknown template');
      }
    }
    const buf = dagPB__namespace.encode({
      Data: data,
      Links: []
    });
    const hash = await sha2.sha256.digest(buf);
    const cid$1 = cid.CID.createV0(hash);
    await repo.blocks.put(cid$1, buf, { signal: options.signal });
    if (options.preload !== false) {
      preload(cid$1);
    }
    return cid$1;
  }
  return withTimeoutOption.withTimeoutOption(_new);
}

exports.createNew = createNew;
