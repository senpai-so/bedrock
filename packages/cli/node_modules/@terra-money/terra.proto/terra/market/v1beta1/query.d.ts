import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "../../../terra/market/v1beta1/market";
export declare const protobufPackage = "terra.market.v1beta1";
/** QuerySwapRequest is the request type for the Query/Swap RPC method. */
export interface QuerySwapRequest {
    /** offer_coin defines the coin being offered (i.e. 1000000uluna) */
    offerCoin: string;
    /** ask_denom defines the denom of the coin to swap to */
    askDenom: string;
}
/** QuerySwapResponse is the response type for the Query/Swap RPC method. */
export interface QuerySwapResponse {
    /** return_coin defines the coin returned as a result of the swap simulation. */
    returnCoin?: Coin;
}
/** QueryTerraPoolDeltaRequest is the request type for the Query/TerraPoolDelta RPC method. */
export interface QueryTerraPoolDeltaRequest {
}
/** QueryTerraPoolDeltaResponse is the response type for the Query/TerraPoolDelta RPC method. */
export interface QueryTerraPoolDeltaResponse {
    /** terra_pool_delta defines the gap between the TerraPool and the TerraBasePool */
    terraPoolDelta: Uint8Array;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params;
}
export declare const QuerySwapRequest: {
    encode(message: QuerySwapRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySwapRequest;
    fromJSON(object: any): QuerySwapRequest;
    toJSON(message: QuerySwapRequest): unknown;
    fromPartial(object: DeepPartial<QuerySwapRequest>): QuerySwapRequest;
};
export declare const QuerySwapResponse: {
    encode(message: QuerySwapResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySwapResponse;
    fromJSON(object: any): QuerySwapResponse;
    toJSON(message: QuerySwapResponse): unknown;
    fromPartial(object: DeepPartial<QuerySwapResponse>): QuerySwapResponse;
};
export declare const QueryTerraPoolDeltaRequest: {
    encode(_: QueryTerraPoolDeltaRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTerraPoolDeltaRequest;
    fromJSON(_: any): QueryTerraPoolDeltaRequest;
    toJSON(_: QueryTerraPoolDeltaRequest): unknown;
    fromPartial(_: DeepPartial<QueryTerraPoolDeltaRequest>): QueryTerraPoolDeltaRequest;
};
export declare const QueryTerraPoolDeltaResponse: {
    encode(message: QueryTerraPoolDeltaResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTerraPoolDeltaResponse;
    fromJSON(object: any): QueryTerraPoolDeltaResponse;
    toJSON(message: QueryTerraPoolDeltaResponse): unknown;
    fromPartial(object: DeepPartial<QueryTerraPoolDeltaResponse>): QueryTerraPoolDeltaResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Swap returns simulated swap amount. */
    Swap(request: QuerySwapRequest): Promise<QuerySwapResponse>;
    /** TerraPoolDelta returns terra_pool_delta amount. */
    TerraPoolDelta(request: QueryTerraPoolDeltaRequest): Promise<QueryTerraPoolDeltaResponse>;
    /** Params queries all parameters. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Swap(request: QuerySwapRequest): Promise<QuerySwapResponse>;
    TerraPoolDelta(request: QueryTerraPoolDeltaRequest): Promise<QueryTerraPoolDeltaResponse>;
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
