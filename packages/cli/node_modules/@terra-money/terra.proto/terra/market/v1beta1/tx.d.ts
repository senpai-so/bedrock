import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "terra.market.v1beta1";
/** MsgSwap represents a message to swap coin to another denom. */
export interface MsgSwap {
    trader: string;
    offerCoin?: Coin;
    askDenom: string;
}
/** MsgSwapResponse defines the Msg/Swap response type. */
export interface MsgSwapResponse {
    swapCoin?: Coin;
    swapFee?: Coin;
}
/** MsgSwapSend represents a message to swap coin and send all result coin to recipient */
export interface MsgSwapSend {
    fromAddress: string;
    toAddress: string;
    offerCoin?: Coin;
    askDenom: string;
}
/** MsgSwapSendResponse defines the Msg/SwapSend response type. */
export interface MsgSwapSendResponse {
    swapCoin?: Coin;
    swapFee?: Coin;
}
export declare const MsgSwap: {
    encode(message: MsgSwap, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSwap;
    fromJSON(object: any): MsgSwap;
    toJSON(message: MsgSwap): unknown;
    fromPartial(object: DeepPartial<MsgSwap>): MsgSwap;
};
export declare const MsgSwapResponse: {
    encode(message: MsgSwapResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSwapResponse;
    fromJSON(object: any): MsgSwapResponse;
    toJSON(message: MsgSwapResponse): unknown;
    fromPartial(object: DeepPartial<MsgSwapResponse>): MsgSwapResponse;
};
export declare const MsgSwapSend: {
    encode(message: MsgSwapSend, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSwapSend;
    fromJSON(object: any): MsgSwapSend;
    toJSON(message: MsgSwapSend): unknown;
    fromPartial(object: DeepPartial<MsgSwapSend>): MsgSwapSend;
};
export declare const MsgSwapSendResponse: {
    encode(message: MsgSwapSendResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSwapSendResponse;
    fromJSON(object: any): MsgSwapSendResponse;
    toJSON(message: MsgSwapSendResponse): unknown;
    fromPartial(object: DeepPartial<MsgSwapSendResponse>): MsgSwapSendResponse;
};
/** Msg defines the market Msg service. */
export interface Msg {
    /**
     * Swap defines a method for swapping coin from one denom to another
     * denom.
     */
    Swap(request: MsgSwap): Promise<MsgSwapResponse>;
    /**
     * SwapSend defines a method for swapping and sending coin from a account to other
     * account.
     */
    SwapSend(request: MsgSwapSend): Promise<MsgSwapSendResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Swap(request: MsgSwap): Promise<MsgSwapResponse>;
    SwapSend(request: MsgSwapSend): Promise<MsgSwapSendResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
