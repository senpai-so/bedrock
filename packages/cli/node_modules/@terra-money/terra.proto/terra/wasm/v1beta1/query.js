"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryRawStoreResponse = exports.QueryRawStoreRequest = exports.QueryContractStoreResponse = exports.QueryContractStoreRequest = exports.QueryContractInfoResponse = exports.QueryContractInfoRequest = exports.QueryByteCodeResponse = exports.QueryByteCodeRequest = exports.QueryCodeInfoResponse = exports.QueryCodeInfoRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const wasm_1 = require("../../../terra/wasm/v1beta1/wasm");
exports.protobufPackage = "terra.wasm.v1beta1";
const baseQueryCodeInfoRequest = { codeId: long_1.default.UZERO };
exports.QueryCodeInfoRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.codeId.isZero()) {
            writer.uint32(8).uint64(message.codeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryCodeInfoRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryCodeInfoRequest);
        if (object.codeId !== undefined && object.codeId !== null) {
            message.codeId = long_1.default.fromString(object.codeId);
        }
        else {
            message.codeId = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryCodeInfoRequest);
        if (object.codeId !== undefined && object.codeId !== null) {
            message.codeId = object.codeId;
        }
        else {
            message.codeId = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryCodeInfoResponse = {};
exports.QueryCodeInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.codeInfo !== undefined) {
            wasm_1.CodeInfo.encode(message.codeInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryCodeInfoResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codeInfo = wasm_1.CodeInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryCodeInfoResponse);
        if (object.codeInfo !== undefined && object.codeInfo !== null) {
            message.codeInfo = wasm_1.CodeInfo.fromJSON(object.codeInfo);
        }
        else {
            message.codeInfo = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.codeInfo !== undefined &&
            (obj.codeInfo = message.codeInfo ? wasm_1.CodeInfo.toJSON(message.codeInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryCodeInfoResponse);
        if (object.codeInfo !== undefined && object.codeInfo !== null) {
            message.codeInfo = wasm_1.CodeInfo.fromPartial(object.codeInfo);
        }
        else {
            message.codeInfo = undefined;
        }
        return message;
    },
};
const baseQueryByteCodeRequest = { codeId: long_1.default.UZERO };
exports.QueryByteCodeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.codeId.isZero()) {
            writer.uint32(8).uint64(message.codeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryByteCodeRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryByteCodeRequest);
        if (object.codeId !== undefined && object.codeId !== null) {
            message.codeId = long_1.default.fromString(object.codeId);
        }
        else {
            message.codeId = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.codeId !== undefined && (obj.codeId = (message.codeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryByteCodeRequest);
        if (object.codeId !== undefined && object.codeId !== null) {
            message.codeId = object.codeId;
        }
        else {
            message.codeId = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryByteCodeResponse = {};
exports.QueryByteCodeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.byteCode.length !== 0) {
            writer.uint32(10).bytes(message.byteCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryByteCodeResponse);
        message.byteCode = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.byteCode = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryByteCodeResponse);
        message.byteCode = new Uint8Array();
        if (object.byteCode !== undefined && object.byteCode !== null) {
            message.byteCode = bytesFromBase64(object.byteCode);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.byteCode !== undefined &&
            (obj.byteCode = base64FromBytes(message.byteCode !== undefined ? message.byteCode : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryByteCodeResponse);
        if (object.byteCode !== undefined && object.byteCode !== null) {
            message.byteCode = object.byteCode;
        }
        else {
            message.byteCode = new Uint8Array();
        }
        return message;
    },
};
const baseQueryContractInfoRequest = { contractAddress: "" };
exports.QueryContractInfoRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryContractInfoRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryContractInfoRequest);
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = String(object.contractAddress);
        }
        else {
            message.contractAddress = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryContractInfoRequest);
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = object.contractAddress;
        }
        else {
            message.contractAddress = "";
        }
        return message;
    },
};
const baseQueryContractInfoResponse = {};
exports.QueryContractInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractInfo !== undefined) {
            wasm_1.ContractInfo.encode(message.contractInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryContractInfoResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractInfo = wasm_1.ContractInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryContractInfoResponse);
        if (object.contractInfo !== undefined && object.contractInfo !== null) {
            message.contractInfo = wasm_1.ContractInfo.fromJSON(object.contractInfo);
        }
        else {
            message.contractInfo = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.contractInfo !== undefined &&
            (obj.contractInfo = message.contractInfo ? wasm_1.ContractInfo.toJSON(message.contractInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryContractInfoResponse);
        if (object.contractInfo !== undefined && object.contractInfo !== null) {
            message.contractInfo = wasm_1.ContractInfo.fromPartial(object.contractInfo);
        }
        else {
            message.contractInfo = undefined;
        }
        return message;
    },
};
const baseQueryContractStoreRequest = { contractAddress: "" };
exports.QueryContractStoreRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.queryMsg.length !== 0) {
            writer.uint32(18).bytes(message.queryMsg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryContractStoreRequest);
        message.queryMsg = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.queryMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryContractStoreRequest);
        message.queryMsg = new Uint8Array();
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = String(object.contractAddress);
        }
        else {
            message.contractAddress = "";
        }
        if (object.queryMsg !== undefined && object.queryMsg !== null) {
            message.queryMsg = bytesFromBase64(object.queryMsg);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.queryMsg !== undefined &&
            (obj.queryMsg = base64FromBytes(message.queryMsg !== undefined ? message.queryMsg : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryContractStoreRequest);
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = object.contractAddress;
        }
        else {
            message.contractAddress = "";
        }
        if (object.queryMsg !== undefined && object.queryMsg !== null) {
            message.queryMsg = object.queryMsg;
        }
        else {
            message.queryMsg = new Uint8Array();
        }
        return message;
    },
};
const baseQueryContractStoreResponse = {};
exports.QueryContractStoreResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.queryResult.length !== 0) {
            writer.uint32(10).bytes(message.queryResult);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryContractStoreResponse);
        message.queryResult = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queryResult = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryContractStoreResponse);
        message.queryResult = new Uint8Array();
        if (object.queryResult !== undefined && object.queryResult !== null) {
            message.queryResult = bytesFromBase64(object.queryResult);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.queryResult !== undefined &&
            (obj.queryResult = base64FromBytes(message.queryResult !== undefined ? message.queryResult : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryContractStoreResponse);
        if (object.queryResult !== undefined && object.queryResult !== null) {
            message.queryResult = object.queryResult;
        }
        else {
            message.queryResult = new Uint8Array();
        }
        return message;
    },
};
const baseQueryRawStoreRequest = { contractAddress: "" };
exports.QueryRawStoreRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.key.length !== 0) {
            writer.uint32(18).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRawStoreRequest);
        message.key = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.key = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRawStoreRequest);
        message.key = new Uint8Array();
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = String(object.contractAddress);
        }
        else {
            message.contractAddress = "";
        }
        if (object.key !== undefined && object.key !== null) {
            message.key = bytesFromBase64(object.key);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.key !== undefined &&
            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRawStoreRequest);
        if (object.contractAddress !== undefined && object.contractAddress !== null) {
            message.contractAddress = object.contractAddress;
        }
        else {
            message.contractAddress = "";
        }
        if (object.key !== undefined && object.key !== null) {
            message.key = object.key;
        }
        else {
            message.key = new Uint8Array();
        }
        return message;
    },
};
const baseQueryRawStoreResponse = {};
exports.QueryRawStoreResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRawStoreResponse);
        message.data = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRawStoreResponse);
        message.data = new Uint8Array();
        if (object.data !== undefined && object.data !== null) {
            message.data = bytesFromBase64(object.data);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRawStoreResponse);
        if (object.data !== undefined && object.data !== null) {
            message.data = object.data;
        }
        else {
            message.data = new Uint8Array();
        }
        return message;
    },
};
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            wasm_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = wasm_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = wasm_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? wasm_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = wasm_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.CodeInfo = this.CodeInfo.bind(this);
        this.ByteCode = this.ByteCode.bind(this);
        this.ContractInfo = this.ContractInfo.bind(this);
        this.ContractStore = this.ContractStore.bind(this);
        this.RawStore = this.RawStore.bind(this);
        this.Params = this.Params.bind(this);
    }
    CodeInfo(request) {
        const data = exports.QueryCodeInfoRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "CodeInfo", data);
        return promise.then((data) => exports.QueryCodeInfoResponse.decode(new minimal_1.default.Reader(data)));
    }
    ByteCode(request) {
        const data = exports.QueryByteCodeRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "ByteCode", data);
        return promise.then((data) => exports.QueryByteCodeResponse.decode(new minimal_1.default.Reader(data)));
    }
    ContractInfo(request) {
        const data = exports.QueryContractInfoRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "ContractInfo", data);
        return promise.then((data) => exports.QueryContractInfoResponse.decode(new minimal_1.default.Reader(data)));
    }
    ContractStore(request) {
        const data = exports.QueryContractStoreRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "ContractStore", data);
        return promise.then((data) => exports.QueryContractStoreResponse.decode(new minimal_1.default.Reader(data)));
    }
    RawStore(request) {
        const data = exports.QueryRawStoreRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "RawStore", data);
        return promise.then((data) => exports.QueryRawStoreResponse.decode(new minimal_1.default.Reader(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.wasm.v1beta1.Query", "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map