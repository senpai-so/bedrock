import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params, ExchangeRateTuple, AggregateExchangeRatePrevote, AggregateExchangeRateVote } from "../../../terra/oracle/v1beta1/oracle";
export declare const protobufPackage = "terra.oracle.v1beta1";
/** GenesisState defines the oracle module's genesis state. */
export interface GenesisState {
    params?: Params;
    feederDelegations: FeederDelegation[];
    exchangeRates: ExchangeRateTuple[];
    missCounters: MissCounter[];
    aggregateExchangeRatePrevotes: AggregateExchangeRatePrevote[];
    aggregateExchangeRateVotes: AggregateExchangeRateVote[];
    tobinTaxes: TobinTax[];
}
/**
 * FeederDelegation is the address for where oracle feeder authority are
 * delegated to. By default this struct is only used at genesis to feed in
 * default feeder addresses.
 */
export interface FeederDelegation {
    feederAddress: string;
    validatorAddress: string;
}
/**
 * MissCounter defines an miss counter and validator address pair used in
 * oracle module's genesis state
 */
export interface MissCounter {
    validatorAddress: string;
    missCounter: Long;
}
/**
 * TobinTax defines an denom and tobin_tax pair used in
 * oracle module's genesis state
 */
export interface TobinTax {
    denom: string;
    tobinTax: string;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const FeederDelegation: {
    encode(message: FeederDelegation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FeederDelegation;
    fromJSON(object: any): FeederDelegation;
    toJSON(message: FeederDelegation): unknown;
    fromPartial(object: DeepPartial<FeederDelegation>): FeederDelegation;
};
export declare const MissCounter: {
    encode(message: MissCounter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MissCounter;
    fromJSON(object: any): MissCounter;
    toJSON(message: MissCounter): unknown;
    fromPartial(object: DeepPartial<MissCounter>): MissCounter;
};
export declare const TobinTax: {
    encode(message: TobinTax, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TobinTax;
    fromJSON(object: any): TobinTax;
    toJSON(message: TobinTax): unknown;
    fromPartial(object: DeepPartial<TobinTax>): TobinTax;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
