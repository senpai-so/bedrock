"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangeRateTuple = exports.AggregateExchangeRateVote = exports.AggregateExchangeRatePrevote = exports.Denom = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "terra.oracle.v1beta1";
const baseParams = {
    votePeriod: long_1.default.UZERO,
    voteThreshold: "",
    rewardBand: "",
    rewardDistributionWindow: long_1.default.UZERO,
    slashFraction: "",
    slashWindow: long_1.default.UZERO,
    minValidPerWindow: "",
};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.votePeriod.isZero()) {
            writer.uint32(8).uint64(message.votePeriod);
        }
        if (message.voteThreshold !== "") {
            writer.uint32(18).string(message.voteThreshold);
        }
        if (message.rewardBand !== "") {
            writer.uint32(26).string(message.rewardBand);
        }
        if (!message.rewardDistributionWindow.isZero()) {
            writer.uint32(32).uint64(message.rewardDistributionWindow);
        }
        for (const v of message.whitelist) {
            exports.Denom.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.slashFraction !== "") {
            writer.uint32(50).string(message.slashFraction);
        }
        if (!message.slashWindow.isZero()) {
            writer.uint32(56).uint64(message.slashWindow);
        }
        if (message.minValidPerWindow !== "") {
            writer.uint32(66).string(message.minValidPerWindow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        message.whitelist = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.votePeriod = reader.uint64();
                    break;
                case 2:
                    message.voteThreshold = reader.string();
                    break;
                case 3:
                    message.rewardBand = reader.string();
                    break;
                case 4:
                    message.rewardDistributionWindow = reader.uint64();
                    break;
                case 5:
                    message.whitelist.push(exports.Denom.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.slashFraction = reader.string();
                    break;
                case 7:
                    message.slashWindow = reader.uint64();
                    break;
                case 8:
                    message.minValidPerWindow = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        message.whitelist = [];
        if (object.votePeriod !== undefined && object.votePeriod !== null) {
            message.votePeriod = long_1.default.fromString(object.votePeriod);
        }
        else {
            message.votePeriod = long_1.default.UZERO;
        }
        if (object.voteThreshold !== undefined && object.voteThreshold !== null) {
            message.voteThreshold = String(object.voteThreshold);
        }
        else {
            message.voteThreshold = "";
        }
        if (object.rewardBand !== undefined && object.rewardBand !== null) {
            message.rewardBand = String(object.rewardBand);
        }
        else {
            message.rewardBand = "";
        }
        if (object.rewardDistributionWindow !== undefined && object.rewardDistributionWindow !== null) {
            message.rewardDistributionWindow = long_1.default.fromString(object.rewardDistributionWindow);
        }
        else {
            message.rewardDistributionWindow = long_1.default.UZERO;
        }
        if (object.whitelist !== undefined && object.whitelist !== null) {
            for (const e of object.whitelist) {
                message.whitelist.push(exports.Denom.fromJSON(e));
            }
        }
        if (object.slashFraction !== undefined && object.slashFraction !== null) {
            message.slashFraction = String(object.slashFraction);
        }
        else {
            message.slashFraction = "";
        }
        if (object.slashWindow !== undefined && object.slashWindow !== null) {
            message.slashWindow = long_1.default.fromString(object.slashWindow);
        }
        else {
            message.slashWindow = long_1.default.UZERO;
        }
        if (object.minValidPerWindow !== undefined && object.minValidPerWindow !== null) {
            message.minValidPerWindow = String(object.minValidPerWindow);
        }
        else {
            message.minValidPerWindow = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.votePeriod !== undefined && (obj.votePeriod = (message.votePeriod || long_1.default.UZERO).toString());
        message.voteThreshold !== undefined && (obj.voteThreshold = message.voteThreshold);
        message.rewardBand !== undefined && (obj.rewardBand = message.rewardBand);
        message.rewardDistributionWindow !== undefined &&
            (obj.rewardDistributionWindow = (message.rewardDistributionWindow || long_1.default.UZERO).toString());
        if (message.whitelist) {
            obj.whitelist = message.whitelist.map((e) => (e ? exports.Denom.toJSON(e) : undefined));
        }
        else {
            obj.whitelist = [];
        }
        message.slashFraction !== undefined && (obj.slashFraction = message.slashFraction);
        message.slashWindow !== undefined && (obj.slashWindow = (message.slashWindow || long_1.default.UZERO).toString());
        message.minValidPerWindow !== undefined && (obj.minValidPerWindow = message.minValidPerWindow);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        message.whitelist = [];
        if (object.votePeriod !== undefined && object.votePeriod !== null) {
            message.votePeriod = object.votePeriod;
        }
        else {
            message.votePeriod = long_1.default.UZERO;
        }
        if (object.voteThreshold !== undefined && object.voteThreshold !== null) {
            message.voteThreshold = object.voteThreshold;
        }
        else {
            message.voteThreshold = "";
        }
        if (object.rewardBand !== undefined && object.rewardBand !== null) {
            message.rewardBand = object.rewardBand;
        }
        else {
            message.rewardBand = "";
        }
        if (object.rewardDistributionWindow !== undefined && object.rewardDistributionWindow !== null) {
            message.rewardDistributionWindow = object.rewardDistributionWindow;
        }
        else {
            message.rewardDistributionWindow = long_1.default.UZERO;
        }
        if (object.whitelist !== undefined && object.whitelist !== null) {
            for (const e of object.whitelist) {
                message.whitelist.push(exports.Denom.fromPartial(e));
            }
        }
        if (object.slashFraction !== undefined && object.slashFraction !== null) {
            message.slashFraction = object.slashFraction;
        }
        else {
            message.slashFraction = "";
        }
        if (object.slashWindow !== undefined && object.slashWindow !== null) {
            message.slashWindow = object.slashWindow;
        }
        else {
            message.slashWindow = long_1.default.UZERO;
        }
        if (object.minValidPerWindow !== undefined && object.minValidPerWindow !== null) {
            message.minValidPerWindow = object.minValidPerWindow;
        }
        else {
            message.minValidPerWindow = "";
        }
        return message;
    },
};
const baseDenom = { name: "", tobinTax: "" };
exports.Denom = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.tobinTax !== "") {
            writer.uint32(18).string(message.tobinTax);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDenom);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.tobinTax = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDenom);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.tobinTax !== undefined && object.tobinTax !== null) {
            message.tobinTax = String(object.tobinTax);
        }
        else {
            message.tobinTax = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.tobinTax !== undefined && (obj.tobinTax = message.tobinTax);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseDenom);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.tobinTax !== undefined && object.tobinTax !== null) {
            message.tobinTax = object.tobinTax;
        }
        else {
            message.tobinTax = "";
        }
        return message;
    },
};
const baseAggregateExchangeRatePrevote = { hash: "", voter: "", submitBlock: long_1.default.UZERO };
exports.AggregateExchangeRatePrevote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.voter !== "") {
            writer.uint32(18).string(message.voter);
        }
        if (!message.submitBlock.isZero()) {
            writer.uint32(24).uint64(message.submitBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAggregateExchangeRatePrevote);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hash = reader.string();
                    break;
                case 2:
                    message.voter = reader.string();
                    break;
                case 3:
                    message.submitBlock = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAggregateExchangeRatePrevote);
        if (object.hash !== undefined && object.hash !== null) {
            message.hash = String(object.hash);
        }
        else {
            message.hash = "";
        }
        if (object.voter !== undefined && object.voter !== null) {
            message.voter = String(object.voter);
        }
        else {
            message.voter = "";
        }
        if (object.submitBlock !== undefined && object.submitBlock !== null) {
            message.submitBlock = long_1.default.fromString(object.submitBlock);
        }
        else {
            message.submitBlock = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        message.voter !== undefined && (obj.voter = message.voter);
        message.submitBlock !== undefined && (obj.submitBlock = (message.submitBlock || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAggregateExchangeRatePrevote);
        if (object.hash !== undefined && object.hash !== null) {
            message.hash = object.hash;
        }
        else {
            message.hash = "";
        }
        if (object.voter !== undefined && object.voter !== null) {
            message.voter = object.voter;
        }
        else {
            message.voter = "";
        }
        if (object.submitBlock !== undefined && object.submitBlock !== null) {
            message.submitBlock = object.submitBlock;
        }
        else {
            message.submitBlock = long_1.default.UZERO;
        }
        return message;
    },
};
const baseAggregateExchangeRateVote = { voter: "" };
exports.AggregateExchangeRateVote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.exchangeRateTuples) {
            exports.ExchangeRateTuple.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.voter !== "") {
            writer.uint32(18).string(message.voter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAggregateExchangeRateVote);
        message.exchangeRateTuples = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.exchangeRateTuples.push(exports.ExchangeRateTuple.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.voter = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAggregateExchangeRateVote);
        message.exchangeRateTuples = [];
        if (object.exchangeRateTuples !== undefined && object.exchangeRateTuples !== null) {
            for (const e of object.exchangeRateTuples) {
                message.exchangeRateTuples.push(exports.ExchangeRateTuple.fromJSON(e));
            }
        }
        if (object.voter !== undefined && object.voter !== null) {
            message.voter = String(object.voter);
        }
        else {
            message.voter = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.exchangeRateTuples) {
            obj.exchangeRateTuples = message.exchangeRateTuples.map((e) => e ? exports.ExchangeRateTuple.toJSON(e) : undefined);
        }
        else {
            obj.exchangeRateTuples = [];
        }
        message.voter !== undefined && (obj.voter = message.voter);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAggregateExchangeRateVote);
        message.exchangeRateTuples = [];
        if (object.exchangeRateTuples !== undefined && object.exchangeRateTuples !== null) {
            for (const e of object.exchangeRateTuples) {
                message.exchangeRateTuples.push(exports.ExchangeRateTuple.fromPartial(e));
            }
        }
        if (object.voter !== undefined && object.voter !== null) {
            message.voter = object.voter;
        }
        else {
            message.voter = "";
        }
        return message;
    },
};
const baseExchangeRateTuple = { denom: "", exchangeRate: "" };
exports.ExchangeRateTuple = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.exchangeRate !== "") {
            writer.uint32(18).string(message.exchangeRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseExchangeRateTuple);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.exchangeRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseExchangeRateTuple);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.exchangeRate !== undefined && object.exchangeRate !== null) {
            message.exchangeRate = String(object.exchangeRate);
        }
        else {
            message.exchangeRate = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.exchangeRate !== undefined && (obj.exchangeRate = message.exchangeRate);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseExchangeRateTuple);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.exchangeRate !== undefined && object.exchangeRate !== null) {
            message.exchangeRate = object.exchangeRate;
        }
        else {
            message.exchangeRate = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=oracle.js.map