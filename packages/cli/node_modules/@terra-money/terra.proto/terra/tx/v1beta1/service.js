"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceClientImpl = exports.ComputeTaxResponse = exports.ComputeTaxRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const tx_1 = require("../../../cosmos/tx/v1beta1/tx");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "terra.tx.v1beta1";
const baseComputeTaxRequest = {};
exports.ComputeTaxRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tx !== undefined) {
            tx_1.Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseComputeTaxRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tx = tx_1.Tx.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseComputeTaxRequest);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = tx_1.Tx.fromJSON(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.tx !== undefined && (obj.tx = message.tx ? tx_1.Tx.toJSON(message.tx) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseComputeTaxRequest);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = tx_1.Tx.fromPartial(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
};
const baseComputeTaxResponse = {};
exports.ComputeTaxResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxAmount) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseComputeTaxResponse);
        message.taxAmount = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxAmount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseComputeTaxResponse);
        message.taxAmount = [];
        if (object.taxAmount !== undefined && object.taxAmount !== null) {
            for (const e of object.taxAmount) {
                message.taxAmount.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxAmount) {
            obj.taxAmount = message.taxAmount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.taxAmount = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseComputeTaxResponse);
        message.taxAmount = [];
        if (object.taxAmount !== undefined && object.taxAmount !== null) {
            for (const e of object.taxAmount) {
                message.taxAmount.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
class ServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.ComputeTax = this.ComputeTax.bind(this);
    }
    ComputeTax(request) {
        const data = exports.ComputeTaxRequest.encode(request).finish();
        const promise = this.rpc.request("terra.tx.v1beta1.Service", "ComputeTax", data);
        return promise.then((data) => exports.ComputeTaxResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.ServiceClientImpl = ServiceClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=service.js.map