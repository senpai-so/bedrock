"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VestingSchedule = exports.Schedule = exports.LazyGradedVestingAccount = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const vesting_1 = require("../../../cosmos/vesting/v1beta1/vesting");
exports.protobufPackage = "terra.vesting.v1beta1";
const baseLazyGradedVestingAccount = {};
exports.LazyGradedVestingAccount = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.baseVestingAccount !== undefined) {
            vesting_1.BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.vestingSchedules) {
            exports.VestingSchedule.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseLazyGradedVestingAccount);
        message.vestingSchedules = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseVestingAccount = vesting_1.BaseVestingAccount.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.vestingSchedules.push(exports.VestingSchedule.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseLazyGradedVestingAccount);
        message.vestingSchedules = [];
        if (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null) {
            message.baseVestingAccount = vesting_1.BaseVestingAccount.fromJSON(object.baseVestingAccount);
        }
        else {
            message.baseVestingAccount = undefined;
        }
        if (object.vestingSchedules !== undefined && object.vestingSchedules !== null) {
            for (const e of object.vestingSchedules) {
                message.vestingSchedules.push(exports.VestingSchedule.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.baseVestingAccount !== undefined &&
            (obj.baseVestingAccount = message.baseVestingAccount
                ? vesting_1.BaseVestingAccount.toJSON(message.baseVestingAccount)
                : undefined);
        if (message.vestingSchedules) {
            obj.vestingSchedules = message.vestingSchedules.map((e) => (e ? exports.VestingSchedule.toJSON(e) : undefined));
        }
        else {
            obj.vestingSchedules = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseLazyGradedVestingAccount);
        message.vestingSchedules = [];
        if (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null) {
            message.baseVestingAccount = vesting_1.BaseVestingAccount.fromPartial(object.baseVestingAccount);
        }
        else {
            message.baseVestingAccount = undefined;
        }
        if (object.vestingSchedules !== undefined && object.vestingSchedules !== null) {
            for (const e of object.vestingSchedules) {
                message.vestingSchedules.push(exports.VestingSchedule.fromPartial(e));
            }
        }
        return message;
    },
};
const baseSchedule = { startTime: long_1.default.ZERO, endTime: long_1.default.ZERO, ratio: "" };
exports.Schedule = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.startTime.isZero()) {
            writer.uint32(8).int64(message.startTime);
        }
        if (!message.endTime.isZero()) {
            writer.uint32(16).int64(message.endTime);
        }
        if (message.ratio !== "") {
            writer.uint32(26).string(message.ratio);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseSchedule);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.startTime = reader.int64();
                    break;
                case 2:
                    message.endTime = reader.int64();
                    break;
                case 3:
                    message.ratio = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseSchedule);
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = long_1.default.fromString(object.startTime);
        }
        else {
            message.startTime = long_1.default.ZERO;
        }
        if (object.endTime !== undefined && object.endTime !== null) {
            message.endTime = long_1.default.fromString(object.endTime);
        }
        else {
            message.endTime = long_1.default.ZERO;
        }
        if (object.ratio !== undefined && object.ratio !== null) {
            message.ratio = String(object.ratio);
        }
        else {
            message.ratio = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.startTime !== undefined && (obj.startTime = (message.startTime || long_1.default.ZERO).toString());
        message.endTime !== undefined && (obj.endTime = (message.endTime || long_1.default.ZERO).toString());
        message.ratio !== undefined && (obj.ratio = message.ratio);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseSchedule);
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = object.startTime;
        }
        else {
            message.startTime = long_1.default.ZERO;
        }
        if (object.endTime !== undefined && object.endTime !== null) {
            message.endTime = object.endTime;
        }
        else {
            message.endTime = long_1.default.ZERO;
        }
        if (object.ratio !== undefined && object.ratio !== null) {
            message.ratio = object.ratio;
        }
        else {
            message.ratio = "";
        }
        return message;
    },
};
const baseVestingSchedule = { denom: "" };
exports.VestingSchedule = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        for (const v of message.schedules) {
            exports.Schedule.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseVestingSchedule);
        message.schedules = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.schedules.push(exports.Schedule.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseVestingSchedule);
        message.schedules = [];
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.schedules !== undefined && object.schedules !== null) {
            for (const e of object.schedules) {
                message.schedules.push(exports.Schedule.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        if (message.schedules) {
            obj.schedules = message.schedules.map((e) => (e ? exports.Schedule.toJSON(e) : undefined));
        }
        else {
            obj.schedules = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseVestingSchedule);
        message.schedules = [];
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.schedules !== undefined && object.schedules !== null) {
            for (const e of object.schedules) {
                message.schedules.push(exports.Schedule.fromPartial(e));
            }
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=vesting.js.map