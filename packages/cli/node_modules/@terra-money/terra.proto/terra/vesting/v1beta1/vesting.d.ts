import Long from "long";
import _m0 from "protobufjs/minimal";
import { BaseVestingAccount } from "../../../cosmos/vesting/v1beta1/vesting";
export declare const protobufPackage = "terra.vesting.v1beta1";
/**
 * LazyGradedVestingAccount implements the LazyGradedVestingAccount interface. It vests all
 * coins according to a predefined schedule.
 */
export interface LazyGradedVestingAccount {
    baseVestingAccount?: BaseVestingAccount;
    vestingSchedules: VestingSchedule[];
}
/** Schedule - represent single schedule data for a vesting schedule */
export interface Schedule {
    startTime: Long;
    endTime: Long;
    ratio: string;
}
/** VestingSchedule defines vesting schedule for a denom */
export interface VestingSchedule {
    denom: string;
    schedules: Schedule[];
}
export declare const LazyGradedVestingAccount: {
    encode(message: LazyGradedVestingAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LazyGradedVestingAccount;
    fromJSON(object: any): LazyGradedVestingAccount;
    toJSON(message: LazyGradedVestingAccount): unknown;
    fromPartial(object: DeepPartial<LazyGradedVestingAccount>): LazyGradedVestingAccount;
};
export declare const Schedule: {
    encode(message: Schedule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Schedule;
    fromJSON(object: any): Schedule;
    toJSON(message: Schedule): unknown;
    fromPartial(object: DeepPartial<Schedule>): Schedule;
};
export declare const VestingSchedule: {
    encode(message: VestingSchedule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VestingSchedule;
    fromJSON(object: any): VestingSchedule;
    toJSON(message: VestingSchedule): unknown;
    fromPartial(object: DeepPartial<VestingSchedule>): VestingSchedule;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
