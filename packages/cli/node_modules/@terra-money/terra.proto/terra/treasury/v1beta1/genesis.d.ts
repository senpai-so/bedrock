import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "../../../terra/treasury/v1beta1/treasury";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "terra.treasury.v1beta1";
/** GenesisState defines the oracle module's genesis state. */
export interface GenesisState {
    params?: Params;
    taxRate: string;
    rewardWeight: string;
    taxCaps: TaxCap[];
    taxProceeds: Coin[];
    epochInitialIssuance: Coin[];
    epochStates: EpochState[];
}
/** TaxCap is the max tax amount can be charged for the given denom */
export interface TaxCap {
    denom: string;
    taxCap: string;
}
/** EpochState is the record for each epoch state */
export interface EpochState {
    epoch: Long;
    taxReward: string;
    seigniorageReward: string;
    totalStakedLuna: string;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const TaxCap: {
    encode(message: TaxCap, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TaxCap;
    fromJSON(object: any): TaxCap;
    toJSON(message: TaxCap): unknown;
    fromPartial(object: DeepPartial<TaxCap>): TaxCap;
};
export declare const EpochState: {
    encode(message: EpochState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EpochState;
    fromJSON(object: any): EpochState;
    toJSON(message: EpochState): unknown;
    fromPartial(object: DeepPartial<EpochState>): EpochState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
