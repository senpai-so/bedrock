"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpochInitialIssuance = exports.EpochTaxProceeds = exports.PolicyConstraints = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "terra.treasury.v1beta1";
const baseParams = {
    seigniorageBurdenTarget: "",
    miningIncrement: "",
    windowShort: long_1.default.UZERO,
    windowLong: long_1.default.UZERO,
    windowProbation: long_1.default.UZERO,
};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taxPolicy !== undefined) {
            exports.PolicyConstraints.encode(message.taxPolicy, writer.uint32(10).fork()).ldelim();
        }
        if (message.rewardPolicy !== undefined) {
            exports.PolicyConstraints.encode(message.rewardPolicy, writer.uint32(18).fork()).ldelim();
        }
        if (message.seigniorageBurdenTarget !== "") {
            writer.uint32(26).string(message.seigniorageBurdenTarget);
        }
        if (message.miningIncrement !== "") {
            writer.uint32(34).string(message.miningIncrement);
        }
        if (!message.windowShort.isZero()) {
            writer.uint32(40).uint64(message.windowShort);
        }
        if (!message.windowLong.isZero()) {
            writer.uint32(48).uint64(message.windowLong);
        }
        if (!message.windowProbation.isZero()) {
            writer.uint32(56).uint64(message.windowProbation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxPolicy = exports.PolicyConstraints.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardPolicy = exports.PolicyConstraints.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.seigniorageBurdenTarget = reader.string();
                    break;
                case 4:
                    message.miningIncrement = reader.string();
                    break;
                case 5:
                    message.windowShort = reader.uint64();
                    break;
                case 6:
                    message.windowLong = reader.uint64();
                    break;
                case 7:
                    message.windowProbation = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        if (object.taxPolicy !== undefined && object.taxPolicy !== null) {
            message.taxPolicy = exports.PolicyConstraints.fromJSON(object.taxPolicy);
        }
        else {
            message.taxPolicy = undefined;
        }
        if (object.rewardPolicy !== undefined && object.rewardPolicy !== null) {
            message.rewardPolicy = exports.PolicyConstraints.fromJSON(object.rewardPolicy);
        }
        else {
            message.rewardPolicy = undefined;
        }
        if (object.seigniorageBurdenTarget !== undefined && object.seigniorageBurdenTarget !== null) {
            message.seigniorageBurdenTarget = String(object.seigniorageBurdenTarget);
        }
        else {
            message.seigniorageBurdenTarget = "";
        }
        if (object.miningIncrement !== undefined && object.miningIncrement !== null) {
            message.miningIncrement = String(object.miningIncrement);
        }
        else {
            message.miningIncrement = "";
        }
        if (object.windowShort !== undefined && object.windowShort !== null) {
            message.windowShort = long_1.default.fromString(object.windowShort);
        }
        else {
            message.windowShort = long_1.default.UZERO;
        }
        if (object.windowLong !== undefined && object.windowLong !== null) {
            message.windowLong = long_1.default.fromString(object.windowLong);
        }
        else {
            message.windowLong = long_1.default.UZERO;
        }
        if (object.windowProbation !== undefined && object.windowProbation !== null) {
            message.windowProbation = long_1.default.fromString(object.windowProbation);
        }
        else {
            message.windowProbation = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.taxPolicy !== undefined &&
            (obj.taxPolicy = message.taxPolicy ? exports.PolicyConstraints.toJSON(message.taxPolicy) : undefined);
        message.rewardPolicy !== undefined &&
            (obj.rewardPolicy = message.rewardPolicy ? exports.PolicyConstraints.toJSON(message.rewardPolicy) : undefined);
        message.seigniorageBurdenTarget !== undefined &&
            (obj.seigniorageBurdenTarget = message.seigniorageBurdenTarget);
        message.miningIncrement !== undefined && (obj.miningIncrement = message.miningIncrement);
        message.windowShort !== undefined && (obj.windowShort = (message.windowShort || long_1.default.UZERO).toString());
        message.windowLong !== undefined && (obj.windowLong = (message.windowLong || long_1.default.UZERO).toString());
        message.windowProbation !== undefined &&
            (obj.windowProbation = (message.windowProbation || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        if (object.taxPolicy !== undefined && object.taxPolicy !== null) {
            message.taxPolicy = exports.PolicyConstraints.fromPartial(object.taxPolicy);
        }
        else {
            message.taxPolicy = undefined;
        }
        if (object.rewardPolicy !== undefined && object.rewardPolicy !== null) {
            message.rewardPolicy = exports.PolicyConstraints.fromPartial(object.rewardPolicy);
        }
        else {
            message.rewardPolicy = undefined;
        }
        if (object.seigniorageBurdenTarget !== undefined && object.seigniorageBurdenTarget !== null) {
            message.seigniorageBurdenTarget = object.seigniorageBurdenTarget;
        }
        else {
            message.seigniorageBurdenTarget = "";
        }
        if (object.miningIncrement !== undefined && object.miningIncrement !== null) {
            message.miningIncrement = object.miningIncrement;
        }
        else {
            message.miningIncrement = "";
        }
        if (object.windowShort !== undefined && object.windowShort !== null) {
            message.windowShort = object.windowShort;
        }
        else {
            message.windowShort = long_1.default.UZERO;
        }
        if (object.windowLong !== undefined && object.windowLong !== null) {
            message.windowLong = object.windowLong;
        }
        else {
            message.windowLong = long_1.default.UZERO;
        }
        if (object.windowProbation !== undefined && object.windowProbation !== null) {
            message.windowProbation = object.windowProbation;
        }
        else {
            message.windowProbation = long_1.default.UZERO;
        }
        return message;
    },
};
const basePolicyConstraints = { rateMin: "", rateMax: "", changeRateMax: "" };
exports.PolicyConstraints = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rateMin !== "") {
            writer.uint32(10).string(message.rateMin);
        }
        if (message.rateMax !== "") {
            writer.uint32(18).string(message.rateMax);
        }
        if (message.cap !== undefined) {
            coin_1.Coin.encode(message.cap, writer.uint32(26).fork()).ldelim();
        }
        if (message.changeRateMax !== "") {
            writer.uint32(34).string(message.changeRateMax);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePolicyConstraints);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rateMin = reader.string();
                    break;
                case 2:
                    message.rateMax = reader.string();
                    break;
                case 3:
                    message.cap = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.changeRateMax = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePolicyConstraints);
        if (object.rateMin !== undefined && object.rateMin !== null) {
            message.rateMin = String(object.rateMin);
        }
        else {
            message.rateMin = "";
        }
        if (object.rateMax !== undefined && object.rateMax !== null) {
            message.rateMax = String(object.rateMax);
        }
        else {
            message.rateMax = "";
        }
        if (object.cap !== undefined && object.cap !== null) {
            message.cap = coin_1.Coin.fromJSON(object.cap);
        }
        else {
            message.cap = undefined;
        }
        if (object.changeRateMax !== undefined && object.changeRateMax !== null) {
            message.changeRateMax = String(object.changeRateMax);
        }
        else {
            message.changeRateMax = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rateMin !== undefined && (obj.rateMin = message.rateMin);
        message.rateMax !== undefined && (obj.rateMax = message.rateMax);
        message.cap !== undefined && (obj.cap = message.cap ? coin_1.Coin.toJSON(message.cap) : undefined);
        message.changeRateMax !== undefined && (obj.changeRateMax = message.changeRateMax);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePolicyConstraints);
        if (object.rateMin !== undefined && object.rateMin !== null) {
            message.rateMin = object.rateMin;
        }
        else {
            message.rateMin = "";
        }
        if (object.rateMax !== undefined && object.rateMax !== null) {
            message.rateMax = object.rateMax;
        }
        else {
            message.rateMax = "";
        }
        if (object.cap !== undefined && object.cap !== null) {
            message.cap = coin_1.Coin.fromPartial(object.cap);
        }
        else {
            message.cap = undefined;
        }
        if (object.changeRateMax !== undefined && object.changeRateMax !== null) {
            message.changeRateMax = object.changeRateMax;
        }
        else {
            message.changeRateMax = "";
        }
        return message;
    },
};
const baseEpochTaxProceeds = {};
exports.EpochTaxProceeds = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxProceeds) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEpochTaxProceeds);
        message.taxProceeds = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxProceeds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEpochTaxProceeds);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxProceeds) {
            obj.taxProceeds = message.taxProceeds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.taxProceeds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEpochTaxProceeds);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseEpochInitialIssuance = {};
exports.EpochInitialIssuance = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.issuance) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEpochInitialIssuance);
        message.issuance = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.issuance.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEpochInitialIssuance);
        message.issuance = [];
        if (object.issuance !== undefined && object.issuance !== null) {
            for (const e of object.issuance) {
                message.issuance.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.issuance) {
            obj.issuance = message.issuance.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.issuance = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEpochInitialIssuance);
        message.issuance = [];
        if (object.issuance !== undefined && object.issuance !== null) {
            for (const e of object.issuance) {
                message.issuance.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=treasury.js.map