"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryIndicatorsResponse = exports.QueryIndicatorsRequest = exports.QuerySeigniorageProceedsResponse = exports.QuerySeigniorageProceedsRequest = exports.QueryTaxProceedsResponse = exports.QueryTaxProceedsRequest = exports.QueryRewardWeightResponse = exports.QueryRewardWeightRequest = exports.QueryTaxCapsResponse = exports.QueryTaxCapsResponseItem = exports.QueryTaxCapsRequest = exports.QueryTaxCapResponse = exports.QueryTaxCapRequest = exports.QueryTaxRateResponse = exports.QueryTaxRateRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const treasury_1 = require("../../../terra/treasury/v1beta1/treasury");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "terra.treasury.v1beta1";
const baseQueryTaxRateRequest = {};
exports.QueryTaxRateRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxRateRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxRateRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxRateRequest);
        return message;
    },
};
const baseQueryTaxRateResponse = { taxRate: "" };
exports.QueryTaxRateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taxRate !== "") {
            writer.uint32(10).string(message.taxRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxRateResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxRateResponse);
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = String(object.taxRate);
        }
        else {
            message.taxRate = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.taxRate !== undefined && (obj.taxRate = message.taxRate);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxRateResponse);
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = object.taxRate;
        }
        else {
            message.taxRate = "";
        }
        return message;
    },
};
const baseQueryTaxCapRequest = { denom: "" };
exports.QueryTaxCapRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        return message;
    },
};
const baseQueryTaxCapResponse = { taxCap: "" };
exports.QueryTaxCapResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taxCap !== "") {
            writer.uint32(10).string(message.taxCap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxCap = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapResponse);
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = String(object.taxCap);
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.taxCap !== undefined && (obj.taxCap = message.taxCap);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapResponse);
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = object.taxCap;
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
};
const baseQueryTaxCapsRequest = {};
exports.QueryTaxCapsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxCapsRequest);
        return message;
    },
};
const baseQueryTaxCapsResponseItem = { denom: "", taxCap: "" };
exports.QueryTaxCapsResponseItem = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.taxCap !== "") {
            writer.uint32(18).string(message.taxCap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.taxCap = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = String(object.taxCap);
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.taxCap !== undefined && (obj.taxCap = message.taxCap);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponseItem);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = object.taxCap;
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
};
const baseQueryTaxCapsResponse = {};
exports.QueryTaxCapsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxCaps) {
            exports.QueryTaxCapsResponseItem.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxCaps.push(exports.QueryTaxCapsResponseItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.QueryTaxCapsResponseItem.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxCaps) {
            obj.taxCaps = message.taxCaps.map((e) => (e ? exports.QueryTaxCapsResponseItem.toJSON(e) : undefined));
        }
        else {
            obj.taxCaps = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxCapsResponse);
        message.taxCaps = [];
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.QueryTaxCapsResponseItem.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryRewardWeightRequest = {};
exports.QueryRewardWeightRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryRewardWeightRequest);
        return message;
    },
};
const baseQueryRewardWeightResponse = { rewardWeight: "" };
exports.QueryRewardWeightResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rewardWeight !== "") {
            writer.uint32(10).string(message.rewardWeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardWeight = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRewardWeightResponse);
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        return message;
    },
};
const baseQueryTaxProceedsRequest = {};
exports.QueryTaxProceedsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryTaxProceedsRequest);
        return message;
    },
};
const baseQueryTaxProceedsResponse = {};
exports.QueryTaxProceedsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.taxProceeds) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.taxProceeds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.taxProceeds) {
            obj.taxProceeds = message.taxProceeds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.taxProceeds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTaxProceedsResponse);
        message.taxProceeds = [];
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQuerySeigniorageProceedsRequest = {};
exports.QuerySeigniorageProceedsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsRequest);
        return message;
    },
};
const baseQuerySeigniorageProceedsResponse = { seigniorageProceeds: "" };
exports.QuerySeigniorageProceedsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.seigniorageProceeds !== "") {
            writer.uint32(10).string(message.seigniorageProceeds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seigniorageProceeds = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        if (object.seigniorageProceeds !== undefined && object.seigniorageProceeds !== null) {
            message.seigniorageProceeds = String(object.seigniorageProceeds);
        }
        else {
            message.seigniorageProceeds = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.seigniorageProceeds !== undefined && (obj.seigniorageProceeds = message.seigniorageProceeds);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQuerySeigniorageProceedsResponse);
        if (object.seigniorageProceeds !== undefined && object.seigniorageProceeds !== null) {
            message.seigniorageProceeds = object.seigniorageProceeds;
        }
        else {
            message.seigniorageProceeds = "";
        }
        return message;
    },
};
const baseQueryIndicatorsRequest = {};
exports.QueryIndicatorsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryIndicatorsRequest);
        return message;
    },
};
const baseQueryIndicatorsResponse = { trlYear: "", trlMonth: "" };
exports.QueryIndicatorsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.trlYear !== "") {
            writer.uint32(10).string(message.trlYear);
        }
        if (message.trlMonth !== "") {
            writer.uint32(18).string(message.trlMonth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.trlYear = reader.string();
                    break;
                case 2:
                    message.trlMonth = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        if (object.trlYear !== undefined && object.trlYear !== null) {
            message.trlYear = String(object.trlYear);
        }
        else {
            message.trlYear = "";
        }
        if (object.trlMonth !== undefined && object.trlMonth !== null) {
            message.trlMonth = String(object.trlMonth);
        }
        else {
            message.trlMonth = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.trlYear !== undefined && (obj.trlYear = message.trlYear);
        message.trlMonth !== undefined && (obj.trlMonth = message.trlMonth);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryIndicatorsResponse);
        if (object.trlYear !== undefined && object.trlYear !== null) {
            message.trlYear = object.trlYear;
        }
        else {
            message.trlYear = "";
        }
        if (object.trlMonth !== undefined && object.trlMonth !== null) {
            message.trlMonth = object.trlMonth;
        }
        else {
            message.trlMonth = "";
        }
        return message;
    },
};
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            treasury_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = treasury_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? treasury_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.TaxRate = this.TaxRate.bind(this);
        this.TaxCap = this.TaxCap.bind(this);
        this.TaxCaps = this.TaxCaps.bind(this);
        this.RewardWeight = this.RewardWeight.bind(this);
        this.SeigniorageProceeds = this.SeigniorageProceeds.bind(this);
        this.TaxProceeds = this.TaxProceeds.bind(this);
        this.Indicators = this.Indicators.bind(this);
        this.Params = this.Params.bind(this);
    }
    TaxRate(request) {
        const data = exports.QueryTaxRateRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "TaxRate", data);
        return promise.then((data) => exports.QueryTaxRateResponse.decode(new minimal_1.default.Reader(data)));
    }
    TaxCap(request) {
        const data = exports.QueryTaxCapRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "TaxCap", data);
        return promise.then((data) => exports.QueryTaxCapResponse.decode(new minimal_1.default.Reader(data)));
    }
    TaxCaps(request) {
        const data = exports.QueryTaxCapsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "TaxCaps", data);
        return promise.then((data) => exports.QueryTaxCapsResponse.decode(new minimal_1.default.Reader(data)));
    }
    RewardWeight(request) {
        const data = exports.QueryRewardWeightRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "RewardWeight", data);
        return promise.then((data) => exports.QueryRewardWeightResponse.decode(new minimal_1.default.Reader(data)));
    }
    SeigniorageProceeds(request) {
        const data = exports.QuerySeigniorageProceedsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "SeigniorageProceeds", data);
        return promise.then((data) => exports.QuerySeigniorageProceedsResponse.decode(new minimal_1.default.Reader(data)));
    }
    TaxProceeds(request) {
        const data = exports.QueryTaxProceedsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "TaxProceeds", data);
        return promise.then((data) => exports.QueryTaxProceedsResponse.decode(new minimal_1.default.Reader(data)));
    }
    Indicators(request) {
        const data = exports.QueryIndicatorsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "Indicators", data);
        return promise.then((data) => exports.QueryIndicatorsResponse.decode(new minimal_1.default.Reader(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("terra.treasury.v1beta1.Query", "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map