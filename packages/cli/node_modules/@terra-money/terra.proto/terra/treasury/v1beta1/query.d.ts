import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "../../../terra/treasury/v1beta1/treasury";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "terra.treasury.v1beta1";
/** QueryTaxRateRequest is the request type for the Query/TaxRate RPC method. */
export interface QueryTaxRateRequest {
}
/**
 * QueryTaxRateResponse is response type for the
 * Query/TaxRate RPC method.
 */
export interface QueryTaxRateResponse {
    taxRate: string;
}
/** QueryTaxCapRequest is the request type for the Query/TaxCap RPC method. */
export interface QueryTaxCapRequest {
    /** denom defines the denomination to query for. */
    denom: string;
}
/**
 * QueryTaxCapResponse is response type for the
 * Query/TaxCap RPC method.
 */
export interface QueryTaxCapResponse {
    taxCap: string;
}
/** QueryTaxCapsRequest is the request type for the Query/TaxCaps RPC method. */
export interface QueryTaxCapsRequest {
}
/**
 * QueryTaxCapsResponseItem is response item type for the
 * Query/TaxCaps RPC method.
 */
export interface QueryTaxCapsResponseItem {
    denom: string;
    taxCap: string;
}
/**
 * QueryTaxCapsResponse is response type for the
 * Query/TaxCaps RPC method.
 */
export interface QueryTaxCapsResponse {
    taxCaps: QueryTaxCapsResponseItem[];
}
/** QueryRewardWeightRequest is the request type for the Query/RewardWeight RPC method. */
export interface QueryRewardWeightRequest {
}
/**
 * QueryRewardWeightResponse is response type for the
 * Query/RewardWeight RPC method.
 */
export interface QueryRewardWeightResponse {
    rewardWeight: string;
}
/** QueryTaxProceedsRequest is the request type for the Query/TaxProceeds RPC method. */
export interface QueryTaxProceedsRequest {
}
/**
 * QueryTaxProceedsResponse is response type for the
 * Query/TaxProceeds RPC method.
 */
export interface QueryTaxProceedsResponse {
    taxProceeds: Coin[];
}
/** QuerySeigniorageProceedsRequest is the request type for the Query/SeigniorageProceeds RPC method. */
export interface QuerySeigniorageProceedsRequest {
}
/**
 * QuerySeigniorageProceedsResponse is response type for the
 * Query/SeigniorageProceeds RPC method.
 */
export interface QuerySeigniorageProceedsResponse {
    seigniorageProceeds: string;
}
/** QueryIndicatorsRequest is the request type for the Query/Indicators RPC method. */
export interface QueryIndicatorsRequest {
}
/**
 * QueryIndicatorsResponse is response type for the
 * Query/Indicators RPC method.
 */
export interface QueryIndicatorsResponse {
    trlYear: string;
    trlMonth: string;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params;
}
export declare const QueryTaxRateRequest: {
    encode(_: QueryTaxRateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxRateRequest;
    fromJSON(_: any): QueryTaxRateRequest;
    toJSON(_: QueryTaxRateRequest): unknown;
    fromPartial(_: DeepPartial<QueryTaxRateRequest>): QueryTaxRateRequest;
};
export declare const QueryTaxRateResponse: {
    encode(message: QueryTaxRateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxRateResponse;
    fromJSON(object: any): QueryTaxRateResponse;
    toJSON(message: QueryTaxRateResponse): unknown;
    fromPartial(object: DeepPartial<QueryTaxRateResponse>): QueryTaxRateResponse;
};
export declare const QueryTaxCapRequest: {
    encode(message: QueryTaxCapRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxCapRequest;
    fromJSON(object: any): QueryTaxCapRequest;
    toJSON(message: QueryTaxCapRequest): unknown;
    fromPartial(object: DeepPartial<QueryTaxCapRequest>): QueryTaxCapRequest;
};
export declare const QueryTaxCapResponse: {
    encode(message: QueryTaxCapResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxCapResponse;
    fromJSON(object: any): QueryTaxCapResponse;
    toJSON(message: QueryTaxCapResponse): unknown;
    fromPartial(object: DeepPartial<QueryTaxCapResponse>): QueryTaxCapResponse;
};
export declare const QueryTaxCapsRequest: {
    encode(_: QueryTaxCapsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxCapsRequest;
    fromJSON(_: any): QueryTaxCapsRequest;
    toJSON(_: QueryTaxCapsRequest): unknown;
    fromPartial(_: DeepPartial<QueryTaxCapsRequest>): QueryTaxCapsRequest;
};
export declare const QueryTaxCapsResponseItem: {
    encode(message: QueryTaxCapsResponseItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxCapsResponseItem;
    fromJSON(object: any): QueryTaxCapsResponseItem;
    toJSON(message: QueryTaxCapsResponseItem): unknown;
    fromPartial(object: DeepPartial<QueryTaxCapsResponseItem>): QueryTaxCapsResponseItem;
};
export declare const QueryTaxCapsResponse: {
    encode(message: QueryTaxCapsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxCapsResponse;
    fromJSON(object: any): QueryTaxCapsResponse;
    toJSON(message: QueryTaxCapsResponse): unknown;
    fromPartial(object: DeepPartial<QueryTaxCapsResponse>): QueryTaxCapsResponse;
};
export declare const QueryRewardWeightRequest: {
    encode(_: QueryRewardWeightRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRewardWeightRequest;
    fromJSON(_: any): QueryRewardWeightRequest;
    toJSON(_: QueryRewardWeightRequest): unknown;
    fromPartial(_: DeepPartial<QueryRewardWeightRequest>): QueryRewardWeightRequest;
};
export declare const QueryRewardWeightResponse: {
    encode(message: QueryRewardWeightResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRewardWeightResponse;
    fromJSON(object: any): QueryRewardWeightResponse;
    toJSON(message: QueryRewardWeightResponse): unknown;
    fromPartial(object: DeepPartial<QueryRewardWeightResponse>): QueryRewardWeightResponse;
};
export declare const QueryTaxProceedsRequest: {
    encode(_: QueryTaxProceedsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxProceedsRequest;
    fromJSON(_: any): QueryTaxProceedsRequest;
    toJSON(_: QueryTaxProceedsRequest): unknown;
    fromPartial(_: DeepPartial<QueryTaxProceedsRequest>): QueryTaxProceedsRequest;
};
export declare const QueryTaxProceedsResponse: {
    encode(message: QueryTaxProceedsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTaxProceedsResponse;
    fromJSON(object: any): QueryTaxProceedsResponse;
    toJSON(message: QueryTaxProceedsResponse): unknown;
    fromPartial(object: DeepPartial<QueryTaxProceedsResponse>): QueryTaxProceedsResponse;
};
export declare const QuerySeigniorageProceedsRequest: {
    encode(_: QuerySeigniorageProceedsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySeigniorageProceedsRequest;
    fromJSON(_: any): QuerySeigniorageProceedsRequest;
    toJSON(_: QuerySeigniorageProceedsRequest): unknown;
    fromPartial(_: DeepPartial<QuerySeigniorageProceedsRequest>): QuerySeigniorageProceedsRequest;
};
export declare const QuerySeigniorageProceedsResponse: {
    encode(message: QuerySeigniorageProceedsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySeigniorageProceedsResponse;
    fromJSON(object: any): QuerySeigniorageProceedsResponse;
    toJSON(message: QuerySeigniorageProceedsResponse): unknown;
    fromPartial(object: DeepPartial<QuerySeigniorageProceedsResponse>): QuerySeigniorageProceedsResponse;
};
export declare const QueryIndicatorsRequest: {
    encode(_: QueryIndicatorsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryIndicatorsRequest;
    fromJSON(_: any): QueryIndicatorsRequest;
    toJSON(_: QueryIndicatorsRequest): unknown;
    fromPartial(_: DeepPartial<QueryIndicatorsRequest>): QueryIndicatorsRequest;
};
export declare const QueryIndicatorsResponse: {
    encode(message: QueryIndicatorsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryIndicatorsResponse;
    fromJSON(object: any): QueryIndicatorsResponse;
    toJSON(message: QueryIndicatorsResponse): unknown;
    fromPartial(object: DeepPartial<QueryIndicatorsResponse>): QueryIndicatorsResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** TaxRate return the current tax rate */
    TaxRate(request: QueryTaxRateRequest): Promise<QueryTaxRateResponse>;
    /** TaxCap returns the tax cap of a denom */
    TaxCap(request: QueryTaxCapRequest): Promise<QueryTaxCapResponse>;
    /** TaxCaps returns the all tax caps */
    TaxCaps(request: QueryTaxCapsRequest): Promise<QueryTaxCapsResponse>;
    /** RewardWeight return the current reward weight */
    RewardWeight(request: QueryRewardWeightRequest): Promise<QueryRewardWeightResponse>;
    /** SeigniorageProceeds return the current seigniorage proceeds */
    SeigniorageProceeds(request: QuerySeigniorageProceedsRequest): Promise<QuerySeigniorageProceedsResponse>;
    /** TaxProceeds return the current tax proceeds */
    TaxProceeds(request: QueryTaxProceedsRequest): Promise<QueryTaxProceedsResponse>;
    /** Indicators return the current trl informations */
    Indicators(request: QueryIndicatorsRequest): Promise<QueryIndicatorsResponse>;
    /** Params queries all parameters. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    TaxRate(request: QueryTaxRateRequest): Promise<QueryTaxRateResponse>;
    TaxCap(request: QueryTaxCapRequest): Promise<QueryTaxCapResponse>;
    TaxCaps(request: QueryTaxCapsRequest): Promise<QueryTaxCapsResponse>;
    RewardWeight(request: QueryRewardWeightRequest): Promise<QueryRewardWeightResponse>;
    SeigniorageProceeds(request: QuerySeigniorageProceedsRequest): Promise<QuerySeigniorageProceedsResponse>;
    TaxProceeds(request: QueryTaxProceedsRequest): Promise<QueryTaxProceedsResponse>;
    Indicators(request: QueryIndicatorsRequest): Promise<QueryIndicatorsResponse>;
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
