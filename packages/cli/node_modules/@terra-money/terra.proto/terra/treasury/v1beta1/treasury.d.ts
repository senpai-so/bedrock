import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "terra.treasury.v1beta1";
/** Params defines the parameters for the oracle module. */
export interface Params {
    taxPolicy?: PolicyConstraints;
    rewardPolicy?: PolicyConstraints;
    seigniorageBurdenTarget: string;
    miningIncrement: string;
    windowShort: Long;
    windowLong: Long;
    windowProbation: Long;
}
/** PolicyConstraints - defines policy constraints can be applied in tax & reward policies */
export interface PolicyConstraints {
    rateMin: string;
    rateMax: string;
    cap?: Coin;
    changeRateMax: string;
}
/**
 * EpochTaxProceeds represents the tax amount
 * collected at the current epoch
 */
export interface EpochTaxProceeds {
    taxProceeds: Coin[];
}
/**
 * EpochInitialIssuance represents initial issuance
 * of the currrent epoch
 */
export interface EpochInitialIssuance {
    issuance: Coin[];
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial(object: DeepPartial<Params>): Params;
};
export declare const PolicyConstraints: {
    encode(message: PolicyConstraints, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PolicyConstraints;
    fromJSON(object: any): PolicyConstraints;
    toJSON(message: PolicyConstraints): unknown;
    fromPartial(object: DeepPartial<PolicyConstraints>): PolicyConstraints;
};
export declare const EpochTaxProceeds: {
    encode(message: EpochTaxProceeds, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EpochTaxProceeds;
    fromJSON(object: any): EpochTaxProceeds;
    toJSON(message: EpochTaxProceeds): unknown;
    fromPartial(object: DeepPartial<EpochTaxProceeds>): EpochTaxProceeds;
};
export declare const EpochInitialIssuance: {
    encode(message: EpochInitialIssuance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EpochInitialIssuance;
    fromJSON(object: any): EpochInitialIssuance;
    toJSON(message: EpochInitialIssuance): unknown;
    fromPartial(object: DeepPartial<EpochInitialIssuance>): EpochInitialIssuance;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
