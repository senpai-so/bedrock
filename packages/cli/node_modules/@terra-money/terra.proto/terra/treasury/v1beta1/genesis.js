"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpochState = exports.TaxCap = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const treasury_1 = require("../../../terra/treasury/v1beta1/treasury");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "terra.treasury.v1beta1";
const baseGenesisState = { taxRate: "", rewardWeight: "" };
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            treasury_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.taxRate !== "") {
            writer.uint32(18).string(message.taxRate);
        }
        if (message.rewardWeight !== "") {
            writer.uint32(26).string(message.rewardWeight);
        }
        for (const v of message.taxCaps) {
            exports.TaxCap.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.taxProceeds) {
            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.epochInitialIssuance) {
            coin_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.epochStates) {
            exports.EpochState.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.taxCaps = [];
        message.taxProceeds = [];
        message.epochInitialIssuance = [];
        message.epochStates = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = treasury_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.taxRate = reader.string();
                    break;
                case 3:
                    message.rewardWeight = reader.string();
                    break;
                case 4:
                    message.taxCaps.push(exports.TaxCap.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.taxProceeds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.epochInitialIssuance.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.epochStates.push(exports.EpochState.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.taxCaps = [];
        message.taxProceeds = [];
        message.epochInitialIssuance = [];
        message.epochStates = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = String(object.taxRate);
        }
        else {
            message.taxRate = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.TaxCap.fromJSON(e));
            }
        }
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.epochInitialIssuance !== undefined && object.epochInitialIssuance !== null) {
            for (const e of object.epochInitialIssuance) {
                message.epochInitialIssuance.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.epochStates !== undefined && object.epochStates !== null) {
            for (const e of object.epochStates) {
                message.epochStates.push(exports.EpochState.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? treasury_1.Params.toJSON(message.params) : undefined);
        message.taxRate !== undefined && (obj.taxRate = message.taxRate);
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        if (message.taxCaps) {
            obj.taxCaps = message.taxCaps.map((e) => (e ? exports.TaxCap.toJSON(e) : undefined));
        }
        else {
            obj.taxCaps = [];
        }
        if (message.taxProceeds) {
            obj.taxProceeds = message.taxProceeds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.taxProceeds = [];
        }
        if (message.epochInitialIssuance) {
            obj.epochInitialIssuance = message.epochInitialIssuance.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.epochInitialIssuance = [];
        }
        if (message.epochStates) {
            obj.epochStates = message.epochStates.map((e) => (e ? exports.EpochState.toJSON(e) : undefined));
        }
        else {
            obj.epochStates = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.taxCaps = [];
        message.taxProceeds = [];
        message.epochInitialIssuance = [];
        message.epochStates = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = treasury_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.taxRate !== undefined && object.taxRate !== null) {
            message.taxRate = object.taxRate;
        }
        else {
            message.taxRate = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        if (object.taxCaps !== undefined && object.taxCaps !== null) {
            for (const e of object.taxCaps) {
                message.taxCaps.push(exports.TaxCap.fromPartial(e));
            }
        }
        if (object.taxProceeds !== undefined && object.taxProceeds !== null) {
            for (const e of object.taxProceeds) {
                message.taxProceeds.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.epochInitialIssuance !== undefined && object.epochInitialIssuance !== null) {
            for (const e of object.epochInitialIssuance) {
                message.epochInitialIssuance.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.epochStates !== undefined && object.epochStates !== null) {
            for (const e of object.epochStates) {
                message.epochStates.push(exports.EpochState.fromPartial(e));
            }
        }
        return message;
    },
};
const baseTaxCap = { denom: "", taxCap: "" };
exports.TaxCap = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.taxCap !== "") {
            writer.uint32(18).string(message.taxCap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseTaxCap);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.taxCap = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseTaxCap);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = String(object.taxCap);
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.taxCap !== undefined && (obj.taxCap = message.taxCap);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseTaxCap);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.taxCap !== undefined && object.taxCap !== null) {
            message.taxCap = object.taxCap;
        }
        else {
            message.taxCap = "";
        }
        return message;
    },
};
const baseEpochState = {
    epoch: long_1.default.UZERO,
    taxReward: "",
    seigniorageReward: "",
    totalStakedLuna: "",
};
exports.EpochState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.epoch.isZero()) {
            writer.uint32(8).uint64(message.epoch);
        }
        if (message.taxReward !== "") {
            writer.uint32(18).string(message.taxReward);
        }
        if (message.seigniorageReward !== "") {
            writer.uint32(26).string(message.seigniorageReward);
        }
        if (message.totalStakedLuna !== "") {
            writer.uint32(34).string(message.totalStakedLuna);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEpochState);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epoch = reader.uint64();
                    break;
                case 2:
                    message.taxReward = reader.string();
                    break;
                case 3:
                    message.seigniorageReward = reader.string();
                    break;
                case 4:
                    message.totalStakedLuna = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEpochState);
        if (object.epoch !== undefined && object.epoch !== null) {
            message.epoch = long_1.default.fromString(object.epoch);
        }
        else {
            message.epoch = long_1.default.UZERO;
        }
        if (object.taxReward !== undefined && object.taxReward !== null) {
            message.taxReward = String(object.taxReward);
        }
        else {
            message.taxReward = "";
        }
        if (object.seigniorageReward !== undefined && object.seigniorageReward !== null) {
            message.seigniorageReward = String(object.seigniorageReward);
        }
        else {
            message.seigniorageReward = "";
        }
        if (object.totalStakedLuna !== undefined && object.totalStakedLuna !== null) {
            message.totalStakedLuna = String(object.totalStakedLuna);
        }
        else {
            message.totalStakedLuna = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epoch !== undefined && (obj.epoch = (message.epoch || long_1.default.UZERO).toString());
        message.taxReward !== undefined && (obj.taxReward = message.taxReward);
        message.seigniorageReward !== undefined && (obj.seigniorageReward = message.seigniorageReward);
        message.totalStakedLuna !== undefined && (obj.totalStakedLuna = message.totalStakedLuna);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEpochState);
        if (object.epoch !== undefined && object.epoch !== null) {
            message.epoch = object.epoch;
        }
        else {
            message.epoch = long_1.default.UZERO;
        }
        if (object.taxReward !== undefined && object.taxReward !== null) {
            message.taxReward = object.taxReward;
        }
        else {
            message.taxReward = "";
        }
        if (object.seigniorageReward !== undefined && object.seigniorageReward !== null) {
            message.seigniorageReward = object.seigniorageReward;
        }
        else {
            message.seigniorageReward = "";
        }
        if (object.totalStakedLuna !== undefined && object.totalStakedLuna !== null) {
            message.totalStakedLuna = object.totalStakedLuna;
        }
        else {
            message.totalStakedLuna = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map