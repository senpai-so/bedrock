"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReflectionServiceClientImpl = exports.QueryMethodDescriptor = exports.QueryServiceDescriptor = exports.QueryServicesDescriptor = exports.GetTxDescriptorResponse = exports.GetTxDescriptorRequest = exports.GetQueryServicesDescriptorResponse = exports.GetQueryServicesDescriptorRequest = exports.GetConfigurationDescriptorResponse = exports.GetConfigurationDescriptorRequest = exports.GetCodecDescriptorResponse = exports.GetCodecDescriptorRequest = exports.GetChainDescriptorResponse = exports.GetChainDescriptorRequest = exports.GetAuthnDescriptorResponse = exports.GetAuthnDescriptorRequest = exports.MsgDescriptor = exports.ConfigurationDescriptor = exports.InterfaceAcceptingMessageDescriptor = exports.InterfaceImplementerDescriptor = exports.InterfaceDescriptor = exports.CodecDescriptor = exports.ChainDescriptor = exports.SigningModeDescriptor = exports.AuthnDescriptor = exports.TxDescriptor = exports.AppDescriptor = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.base.reflection.v2alpha1";
const baseAppDescriptor = {};
exports.AppDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authn !== undefined) {
            exports.AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).ldelim();
        }
        if (message.chain !== undefined) {
            exports.ChainDescriptor.encode(message.chain, writer.uint32(18).fork()).ldelim();
        }
        if (message.codec !== undefined) {
            exports.CodecDescriptor.encode(message.codec, writer.uint32(26).fork()).ldelim();
        }
        if (message.configuration !== undefined) {
            exports.ConfigurationDescriptor.encode(message.configuration, writer.uint32(34).fork()).ldelim();
        }
        if (message.queryServices !== undefined) {
            exports.QueryServicesDescriptor.encode(message.queryServices, writer.uint32(42).fork()).ldelim();
        }
        if (message.tx !== undefined) {
            exports.TxDescriptor.encode(message.tx, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAppDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authn = exports.AuthnDescriptor.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.chain = exports.ChainDescriptor.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.codec = exports.CodecDescriptor.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.configuration = exports.ConfigurationDescriptor.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.queryServices = exports.QueryServicesDescriptor.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.tx = exports.TxDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAppDescriptor);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromJSON(object.authn);
        }
        else {
            message.authn = undefined;
        }
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromJSON(object.chain);
        }
        else {
            message.chain = undefined;
        }
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromJSON(object.codec);
        }
        else {
            message.codec = undefined;
        }
        if (object.configuration !== undefined && object.configuration !== null) {
            message.configuration = exports.ConfigurationDescriptor.fromJSON(object.configuration);
        }
        else {
            message.configuration = undefined;
        }
        if (object.queryServices !== undefined && object.queryServices !== null) {
            message.queryServices = exports.QueryServicesDescriptor.fromJSON(object.queryServices);
        }
        else {
            message.queryServices = undefined;
        }
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromJSON(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.authn !== undefined &&
            (obj.authn = message.authn ? exports.AuthnDescriptor.toJSON(message.authn) : undefined);
        message.chain !== undefined &&
            (obj.chain = message.chain ? exports.ChainDescriptor.toJSON(message.chain) : undefined);
        message.codec !== undefined &&
            (obj.codec = message.codec ? exports.CodecDescriptor.toJSON(message.codec) : undefined);
        message.configuration !== undefined &&
            (obj.configuration = message.configuration
                ? exports.ConfigurationDescriptor.toJSON(message.configuration)
                : undefined);
        message.queryServices !== undefined &&
            (obj.queryServices = message.queryServices
                ? exports.QueryServicesDescriptor.toJSON(message.queryServices)
                : undefined);
        message.tx !== undefined && (obj.tx = message.tx ? exports.TxDescriptor.toJSON(message.tx) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAppDescriptor);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromPartial(object.authn);
        }
        else {
            message.authn = undefined;
        }
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromPartial(object.chain);
        }
        else {
            message.chain = undefined;
        }
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromPartial(object.codec);
        }
        else {
            message.codec = undefined;
        }
        if (object.configuration !== undefined && object.configuration !== null) {
            message.configuration = exports.ConfigurationDescriptor.fromPartial(object.configuration);
        }
        else {
            message.configuration = undefined;
        }
        if (object.queryServices !== undefined && object.queryServices !== null) {
            message.queryServices = exports.QueryServicesDescriptor.fromPartial(object.queryServices);
        }
        else {
            message.queryServices = undefined;
        }
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromPartial(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
};
const baseTxDescriptor = { fullname: "" };
exports.TxDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (const v of message.msgs) {
            exports.MsgDescriptor.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseTxDescriptor);
        message.msgs = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.msgs.push(exports.MsgDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseTxDescriptor);
        message.msgs = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.msgs !== undefined && object.msgs !== null) {
            for (const e of object.msgs) {
                message.msgs.push(exports.MsgDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.msgs) {
            obj.msgs = message.msgs.map((e) => (e ? exports.MsgDescriptor.toJSON(e) : undefined));
        }
        else {
            obj.msgs = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseTxDescriptor);
        message.msgs = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.msgs !== undefined && object.msgs !== null) {
            for (const e of object.msgs) {
                message.msgs.push(exports.MsgDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseAuthnDescriptor = {};
exports.AuthnDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.signModes) {
            exports.SigningModeDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAuthnDescriptor);
        message.signModes = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signModes.push(exports.SigningModeDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAuthnDescriptor);
        message.signModes = [];
        if (object.signModes !== undefined && object.signModes !== null) {
            for (const e of object.signModes) {
                message.signModes.push(exports.SigningModeDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.signModes) {
            obj.signModes = message.signModes.map((e) => (e ? exports.SigningModeDescriptor.toJSON(e) : undefined));
        }
        else {
            obj.signModes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAuthnDescriptor);
        message.signModes = [];
        if (object.signModes !== undefined && object.signModes !== null) {
            for (const e of object.signModes) {
                message.signModes.push(exports.SigningModeDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseSigningModeDescriptor = { name: "", number: 0, authnInfoProviderMethodFullname: "" };
exports.SigningModeDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.number !== 0) {
            writer.uint32(16).int32(message.number);
        }
        if (message.authnInfoProviderMethodFullname !== "") {
            writer.uint32(26).string(message.authnInfoProviderMethodFullname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseSigningModeDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.number = reader.int32();
                    break;
                case 3:
                    message.authnInfoProviderMethodFullname = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseSigningModeDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.number !== undefined && object.number !== null) {
            message.number = Number(object.number);
        }
        else {
            message.number = 0;
        }
        if (object.authnInfoProviderMethodFullname !== undefined &&
            object.authnInfoProviderMethodFullname !== null) {
            message.authnInfoProviderMethodFullname = String(object.authnInfoProviderMethodFullname);
        }
        else {
            message.authnInfoProviderMethodFullname = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.number !== undefined && (obj.number = message.number);
        message.authnInfoProviderMethodFullname !== undefined &&
            (obj.authnInfoProviderMethodFullname = message.authnInfoProviderMethodFullname);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseSigningModeDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.number !== undefined && object.number !== null) {
            message.number = object.number;
        }
        else {
            message.number = 0;
        }
        if (object.authnInfoProviderMethodFullname !== undefined &&
            object.authnInfoProviderMethodFullname !== null) {
            message.authnInfoProviderMethodFullname = object.authnInfoProviderMethodFullname;
        }
        else {
            message.authnInfoProviderMethodFullname = "";
        }
        return message;
    },
};
const baseChainDescriptor = { id: "" };
exports.ChainDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseChainDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseChainDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseChainDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        return message;
    },
};
const baseCodecDescriptor = {};
exports.CodecDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.interfaces) {
            exports.InterfaceDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseCodecDescriptor);
        message.interfaces = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interfaces.push(exports.InterfaceDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseCodecDescriptor);
        message.interfaces = [];
        if (object.interfaces !== undefined && object.interfaces !== null) {
            for (const e of object.interfaces) {
                message.interfaces.push(exports.InterfaceDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.interfaces) {
            obj.interfaces = message.interfaces.map((e) => (e ? exports.InterfaceDescriptor.toJSON(e) : undefined));
        }
        else {
            obj.interfaces = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseCodecDescriptor);
        message.interfaces = [];
        if (object.interfaces !== undefined && object.interfaces !== null) {
            for (const e of object.interfaces) {
                message.interfaces.push(exports.InterfaceDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseInterfaceDescriptor = { fullname: "" };
exports.InterfaceDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (const v of message.interfaceAcceptingMessages) {
            exports.InterfaceAcceptingMessageDescriptor.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.interfaceImplementers) {
            exports.InterfaceImplementerDescriptor.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.interfaceAcceptingMessages !== undefined && object.interfaceAcceptingMessages !== null) {
            for (const e of object.interfaceAcceptingMessages) {
                message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.fromJSON(e));
            }
        }
        if (object.interfaceImplementers !== undefined && object.interfaceImplementers !== null) {
            for (const e of object.interfaceImplementers) {
                message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.interfaceAcceptingMessages) {
            obj.interfaceAcceptingMessages = message.interfaceAcceptingMessages.map((e) => e ? exports.InterfaceAcceptingMessageDescriptor.toJSON(e) : undefined);
        }
        else {
            obj.interfaceAcceptingMessages = [];
        }
        if (message.interfaceImplementers) {
            obj.interfaceImplementers = message.interfaceImplementers.map((e) => e ? exports.InterfaceImplementerDescriptor.toJSON(e) : undefined);
        }
        else {
            obj.interfaceImplementers = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseInterfaceDescriptor);
        message.interfaceAcceptingMessages = [];
        message.interfaceImplementers = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.interfaceAcceptingMessages !== undefined && object.interfaceAcceptingMessages !== null) {
            for (const e of object.interfaceAcceptingMessages) {
                message.interfaceAcceptingMessages.push(exports.InterfaceAcceptingMessageDescriptor.fromPartial(e));
            }
        }
        if (object.interfaceImplementers !== undefined && object.interfaceImplementers !== null) {
            for (const e of object.interfaceImplementers) {
                message.interfaceImplementers.push(exports.InterfaceImplementerDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseInterfaceImplementerDescriptor = { fullname: "", typeUrl: "" };
exports.InterfaceImplementerDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        if (message.typeUrl !== "") {
            writer.uint32(18).string(message.typeUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseInterfaceImplementerDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.typeUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseInterfaceImplementerDescriptor);
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.typeUrl !== undefined && object.typeUrl !== null) {
            message.typeUrl = String(object.typeUrl);
        }
        else {
            message.typeUrl = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseInterfaceImplementerDescriptor);
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.typeUrl !== undefined && object.typeUrl !== null) {
            message.typeUrl = object.typeUrl;
        }
        else {
            message.typeUrl = "";
        }
        return message;
    },
};
const baseInterfaceAcceptingMessageDescriptor = { fullname: "", fieldDescriptorNames: "" };
exports.InterfaceAcceptingMessageDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        for (const v of message.fieldDescriptorNames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.fieldDescriptorNames.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.fieldDescriptorNames !== undefined && object.fieldDescriptorNames !== null) {
            for (const e of object.fieldDescriptorNames) {
                message.fieldDescriptorNames.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        if (message.fieldDescriptorNames) {
            obj.fieldDescriptorNames = message.fieldDescriptorNames.map((e) => e);
        }
        else {
            obj.fieldDescriptorNames = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseInterfaceAcceptingMessageDescriptor);
        message.fieldDescriptorNames = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.fieldDescriptorNames !== undefined && object.fieldDescriptorNames !== null) {
            for (const e of object.fieldDescriptorNames) {
                message.fieldDescriptorNames.push(e);
            }
        }
        return message;
    },
};
const baseConfigurationDescriptor = { bech32AccountAddressPrefix: "" };
exports.ConfigurationDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bech32AccountAddressPrefix !== "") {
            writer.uint32(10).string(message.bech32AccountAddressPrefix);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseConfigurationDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bech32AccountAddressPrefix = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseConfigurationDescriptor);
        if (object.bech32AccountAddressPrefix !== undefined && object.bech32AccountAddressPrefix !== null) {
            message.bech32AccountAddressPrefix = String(object.bech32AccountAddressPrefix);
        }
        else {
            message.bech32AccountAddressPrefix = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.bech32AccountAddressPrefix !== undefined &&
            (obj.bech32AccountAddressPrefix = message.bech32AccountAddressPrefix);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseConfigurationDescriptor);
        if (object.bech32AccountAddressPrefix !== undefined && object.bech32AccountAddressPrefix !== null) {
            message.bech32AccountAddressPrefix = object.bech32AccountAddressPrefix;
        }
        else {
            message.bech32AccountAddressPrefix = "";
        }
        return message;
    },
};
const baseMsgDescriptor = { msgTypeUrl: "" };
exports.MsgDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.msgTypeUrl !== "") {
            writer.uint32(10).string(message.msgTypeUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.msgTypeUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgDescriptor);
        if (object.msgTypeUrl !== undefined && object.msgTypeUrl !== null) {
            message.msgTypeUrl = String(object.msgTypeUrl);
        }
        else {
            message.msgTypeUrl = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgDescriptor);
        if (object.msgTypeUrl !== undefined && object.msgTypeUrl !== null) {
            message.msgTypeUrl = object.msgTypeUrl;
        }
        else {
            message.msgTypeUrl = "";
        }
        return message;
    },
};
const baseGetAuthnDescriptorRequest = {};
exports.GetAuthnDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetAuthnDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetAuthnDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetAuthnDescriptorRequest);
        return message;
    },
};
const baseGetAuthnDescriptorResponse = {};
exports.GetAuthnDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authn !== undefined) {
            exports.AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetAuthnDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authn = exports.AuthnDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetAuthnDescriptorResponse);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromJSON(object.authn);
        }
        else {
            message.authn = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.authn !== undefined &&
            (obj.authn = message.authn ? exports.AuthnDescriptor.toJSON(message.authn) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetAuthnDescriptorResponse);
        if (object.authn !== undefined && object.authn !== null) {
            message.authn = exports.AuthnDescriptor.fromPartial(object.authn);
        }
        else {
            message.authn = undefined;
        }
        return message;
    },
};
const baseGetChainDescriptorRequest = {};
exports.GetChainDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetChainDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetChainDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetChainDescriptorRequest);
        return message;
    },
};
const baseGetChainDescriptorResponse = {};
exports.GetChainDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chain !== undefined) {
            exports.ChainDescriptor.encode(message.chain, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetChainDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = exports.ChainDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetChainDescriptorResponse);
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromJSON(object.chain);
        }
        else {
            message.chain = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined &&
            (obj.chain = message.chain ? exports.ChainDescriptor.toJSON(message.chain) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetChainDescriptorResponse);
        if (object.chain !== undefined && object.chain !== null) {
            message.chain = exports.ChainDescriptor.fromPartial(object.chain);
        }
        else {
            message.chain = undefined;
        }
        return message;
    },
};
const baseGetCodecDescriptorRequest = {};
exports.GetCodecDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetCodecDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetCodecDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetCodecDescriptorRequest);
        return message;
    },
};
const baseGetCodecDescriptorResponse = {};
exports.GetCodecDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.codec !== undefined) {
            exports.CodecDescriptor.encode(message.codec, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetCodecDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codec = exports.CodecDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetCodecDescriptorResponse);
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromJSON(object.codec);
        }
        else {
            message.codec = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.codec !== undefined &&
            (obj.codec = message.codec ? exports.CodecDescriptor.toJSON(message.codec) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetCodecDescriptorResponse);
        if (object.codec !== undefined && object.codec !== null) {
            message.codec = exports.CodecDescriptor.fromPartial(object.codec);
        }
        else {
            message.codec = undefined;
        }
        return message;
    },
};
const baseGetConfigurationDescriptorRequest = {};
exports.GetConfigurationDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetConfigurationDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetConfigurationDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetConfigurationDescriptorRequest);
        return message;
    },
};
const baseGetConfigurationDescriptorResponse = {};
exports.GetConfigurationDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.config !== undefined) {
            exports.ConfigurationDescriptor.encode(message.config, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetConfigurationDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.config = exports.ConfigurationDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetConfigurationDescriptorResponse);
        if (object.config !== undefined && object.config !== null) {
            message.config = exports.ConfigurationDescriptor.fromJSON(object.config);
        }
        else {
            message.config = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.config !== undefined &&
            (obj.config = message.config ? exports.ConfigurationDescriptor.toJSON(message.config) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetConfigurationDescriptorResponse);
        if (object.config !== undefined && object.config !== null) {
            message.config = exports.ConfigurationDescriptor.fromPartial(object.config);
        }
        else {
            message.config = undefined;
        }
        return message;
    },
};
const baseGetQueryServicesDescriptorRequest = {};
exports.GetQueryServicesDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetQueryServicesDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetQueryServicesDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetQueryServicesDescriptorRequest);
        return message;
    },
};
const baseGetQueryServicesDescriptorResponse = {};
exports.GetQueryServicesDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.queries !== undefined) {
            exports.QueryServicesDescriptor.encode(message.queries, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetQueryServicesDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queries = exports.QueryServicesDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetQueryServicesDescriptorResponse);
        if (object.queries !== undefined && object.queries !== null) {
            message.queries = exports.QueryServicesDescriptor.fromJSON(object.queries);
        }
        else {
            message.queries = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.queries !== undefined &&
            (obj.queries = message.queries ? exports.QueryServicesDescriptor.toJSON(message.queries) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetQueryServicesDescriptorResponse);
        if (object.queries !== undefined && object.queries !== null) {
            message.queries = exports.QueryServicesDescriptor.fromPartial(object.queries);
        }
        else {
            message.queries = undefined;
        }
        return message;
    },
};
const baseGetTxDescriptorRequest = {};
exports.GetTxDescriptorRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetTxDescriptorRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseGetTxDescriptorRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseGetTxDescriptorRequest);
        return message;
    },
};
const baseGetTxDescriptorResponse = {};
exports.GetTxDescriptorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tx !== undefined) {
            exports.TxDescriptor.encode(message.tx, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGetTxDescriptorResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tx = exports.TxDescriptor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGetTxDescriptorResponse);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromJSON(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.tx !== undefined && (obj.tx = message.tx ? exports.TxDescriptor.toJSON(message.tx) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGetTxDescriptorResponse);
        if (object.tx !== undefined && object.tx !== null) {
            message.tx = exports.TxDescriptor.fromPartial(object.tx);
        }
        else {
            message.tx = undefined;
        }
        return message;
    },
};
const baseQueryServicesDescriptor = {};
exports.QueryServicesDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.queryServices) {
            exports.QueryServiceDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryServicesDescriptor);
        message.queryServices = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queryServices.push(exports.QueryServiceDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryServicesDescriptor);
        message.queryServices = [];
        if (object.queryServices !== undefined && object.queryServices !== null) {
            for (const e of object.queryServices) {
                message.queryServices.push(exports.QueryServiceDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.queryServices) {
            obj.queryServices = message.queryServices.map((e) => e ? exports.QueryServiceDescriptor.toJSON(e) : undefined);
        }
        else {
            obj.queryServices = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryServicesDescriptor);
        message.queryServices = [];
        if (object.queryServices !== undefined && object.queryServices !== null) {
            for (const e of object.queryServices) {
                message.queryServices.push(exports.QueryServiceDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryServiceDescriptor = { fullname: "", isModule: false };
exports.QueryServiceDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fullname !== "") {
            writer.uint32(10).string(message.fullname);
        }
        if (message.isModule === true) {
            writer.uint32(16).bool(message.isModule);
        }
        for (const v of message.methods) {
            exports.QueryMethodDescriptor.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryServiceDescriptor);
        message.methods = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fullname = reader.string();
                    break;
                case 2:
                    message.isModule = reader.bool();
                    break;
                case 3:
                    message.methods.push(exports.QueryMethodDescriptor.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryServiceDescriptor);
        message.methods = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = String(object.fullname);
        }
        else {
            message.fullname = "";
        }
        if (object.isModule !== undefined && object.isModule !== null) {
            message.isModule = Boolean(object.isModule);
        }
        else {
            message.isModule = false;
        }
        if (object.methods !== undefined && object.methods !== null) {
            for (const e of object.methods) {
                message.methods.push(exports.QueryMethodDescriptor.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fullname !== undefined && (obj.fullname = message.fullname);
        message.isModule !== undefined && (obj.isModule = message.isModule);
        if (message.methods) {
            obj.methods = message.methods.map((e) => (e ? exports.QueryMethodDescriptor.toJSON(e) : undefined));
        }
        else {
            obj.methods = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryServiceDescriptor);
        message.methods = [];
        if (object.fullname !== undefined && object.fullname !== null) {
            message.fullname = object.fullname;
        }
        else {
            message.fullname = "";
        }
        if (object.isModule !== undefined && object.isModule !== null) {
            message.isModule = object.isModule;
        }
        else {
            message.isModule = false;
        }
        if (object.methods !== undefined && object.methods !== null) {
            for (const e of object.methods) {
                message.methods.push(exports.QueryMethodDescriptor.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryMethodDescriptor = { name: "", fullQueryPath: "" };
exports.QueryMethodDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.fullQueryPath !== "") {
            writer.uint32(18).string(message.fullQueryPath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryMethodDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.fullQueryPath = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryMethodDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.fullQueryPath !== undefined && object.fullQueryPath !== null) {
            message.fullQueryPath = String(object.fullQueryPath);
        }
        else {
            message.fullQueryPath = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.fullQueryPath !== undefined && (obj.fullQueryPath = message.fullQueryPath);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryMethodDescriptor);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.fullQueryPath !== undefined && object.fullQueryPath !== null) {
            message.fullQueryPath = object.fullQueryPath;
        }
        else {
            message.fullQueryPath = "";
        }
        return message;
    },
};
class ReflectionServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetAuthnDescriptor = this.GetAuthnDescriptor.bind(this);
        this.GetChainDescriptor = this.GetChainDescriptor.bind(this);
        this.GetCodecDescriptor = this.GetCodecDescriptor.bind(this);
        this.GetConfigurationDescriptor = this.GetConfigurationDescriptor.bind(this);
        this.GetQueryServicesDescriptor = this.GetQueryServicesDescriptor.bind(this);
        this.GetTxDescriptor = this.GetTxDescriptor.bind(this);
    }
    GetAuthnDescriptor(request) {
        const data = exports.GetAuthnDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetAuthnDescriptor", data);
        return promise.then((data) => exports.GetAuthnDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
    GetChainDescriptor(request) {
        const data = exports.GetChainDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetChainDescriptor", data);
        return promise.then((data) => exports.GetChainDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
    GetCodecDescriptor(request) {
        const data = exports.GetCodecDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetCodecDescriptor", data);
        return promise.then((data) => exports.GetCodecDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
    GetConfigurationDescriptor(request) {
        const data = exports.GetConfigurationDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetConfigurationDescriptor", data);
        return promise.then((data) => exports.GetConfigurationDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
    GetQueryServicesDescriptor(request) {
        const data = exports.GetQueryServicesDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetQueryServicesDescriptor", data);
        return promise.then((data) => exports.GetQueryServicesDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
    GetTxDescriptor(request) {
        const data = exports.GetTxDescriptorRequest.encode(request).finish();
        const promise = this.rpc.request("cosmos.base.reflection.v2alpha1.ReflectionService", "GetTxDescriptor", data);
        return promise.then((data) => exports.GetTxDescriptorResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.ReflectionServiceClientImpl = ReflectionServiceClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=reflection.js.map