/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('./types').Validator} Validator
 * @typedef {import('./types').SubscriptionKeyFn} SubscriptionKeyFn
 * @typedef {import('libp2p-interfaces/src/pubsub').InMessage} PubSubMessage
 */
export class PubsubDatastore extends BaseDatastore {
    /**
     * Creates an instance of DatastorePubsub.
     *
     * @param {import('libp2p-interfaces/src/pubsub')} pubsub - pubsub implementation
     * @param {import('interface-datastore').Datastore} datastore - datastore instance
     * @param {PeerId} peerId - peer-id instance
     * @param {Validator} validator - validator functions
     * @param {SubscriptionKeyFn} [subscriptionKeyFn] - function to manipulate the key topic received before processing it
     * @memberof DatastorePubsub
     */
    constructor(pubsub: import('libp2p-interfaces/src/pubsub'), datastore: import('interface-datastore').Datastore, peerId: PeerId, validator: Validator, subscriptionKeyFn?: import("./types").SubscriptionKeyFn | undefined);
    _pubsub: import("libp2p-interfaces/src/pubsub");
    _datastore: import("interface-datastore").Datastore;
    _peerId: import("peer-id");
    _validator: import("./types").Validator;
    _handleSubscriptionKeyFn: import("./types").SubscriptionKeyFn | undefined;
    /**
     * handles pubsub subscription messages
     *
     * @param {PubSubMessage} msg
     */
    _onMessage(msg: PubSubMessage): Promise<void>;
    /**
     * Unsubscribe topic.
     *
     * @param {Uint8Array} key - identifier of the value to unsubscribe.
     * @returns {void}
     */
    unsubscribe(key: Uint8Array): void;
    /**
     * Get record from local datastore
     *
     * @private
     * @param {Uint8Array} key
     */
    private _getLocal;
    /**
     * Store the received record if it is better than the current stored
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} data
     */
    _storeIfSubscriptionIsBetter(key: Uint8Array, data: Uint8Array): Promise<void>;
    /**
     * Validate record according to the received validation function
     *
     * @param {Uint8Array} value
     * @param {Uint8Array} peerId
     */
    _validateRecord(value: Uint8Array, peerId: Uint8Array): Promise<void>;
    /**
     * Select the best record according to the received select function
     *
     * @param {Uint8Array} key
     * @param {Uint8Array[]} records
     */
    _selectRecord(key: Uint8Array, records: Uint8Array[]): Promise<boolean>;
    /**
     * Verify if the record received through pubsub is valid and better than the one currently stored
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} val
     */
    _isBetter(key: Uint8Array, val: Uint8Array): Promise<boolean>;
    /**
     * add record to datastore
     *
     * @param {Uint8Array} key
     * @param {Uint8Array} data
     */
    _storeRecord(key: Uint8Array, data: Uint8Array): Promise<void>;
}
export type PeerId = import('peer-id');
export type Validator = import('./types').Validator;
export type SubscriptionKeyFn = import('./types').SubscriptionKeyFn;
export type PubSubMessage = import('libp2p-interfaces/src/pubsub').InMessage;
import { BaseDatastore } from "datastore-core";
//# sourceMappingURL=index.d.ts.map