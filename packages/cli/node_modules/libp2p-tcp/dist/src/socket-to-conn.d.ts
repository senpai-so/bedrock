export = toConnection;
/**
 * @typedef {import('multiaddr').Multiaddr} Multiaddr
 * @typedef {import('libp2p-interfaces/src/transport/types').MultiaddrConnection} MultiaddrConnection
 * @typedef {import('net').Socket} Socket
 */
/**
 * Convert a socket into a MultiaddrConnection
 * https://github.com/libp2p/interface-transport#multiaddrconnection
 *
 * @private
 * @param {Socket} socket
 * @param {object} options
 * @param {Multiaddr} [options.listeningAddr]
 * @param {Multiaddr} [options.remoteAddr]
 * @param {Multiaddr} [options.localAddr]
 * @param {AbortSignal} [options.signal]
 * @returns {MultiaddrConnection}
 */
declare function toConnection(socket: Socket, options: {
    listeningAddr?: import("multiaddr").Multiaddr | undefined;
    remoteAddr?: import("multiaddr").Multiaddr | undefined;
    localAddr?: import("multiaddr").Multiaddr | undefined;
    signal?: AbortSignal | undefined;
}): MultiaddrConnection;
declare namespace toConnection {
    export { Multiaddr, MultiaddrConnection, Socket };
}
type Socket = import('net').Socket;
type MultiaddrConnection = import('libp2p-interfaces/src/transport/types').MultiaddrConnection;
type Multiaddr = import('multiaddr').Multiaddr;
//# sourceMappingURL=socket-to-conn.d.ts.map