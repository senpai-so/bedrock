/**
 * @param {import('./types').PeerData} peer
 */
export function removePrivateAddresses({ id, multiaddrs }: import('./types').PeerData): {
    id: PeerId;
    multiaddrs: import("multiaddr").Multiaddr[];
};
/**
 * @param {import('./types').PeerData} peer
 */
export function removePublicAddresses({ id, multiaddrs }: import('./types').PeerData): {
    id: PeerId;
    multiaddrs: import("multiaddr").Multiaddr[];
};
/**
 * Creates a DHT ID by hashing a given Uint8Array.
 *
 * @param {Uint8Array} buf
 * @returns {Promise<Uint8Array>}
 */
export function convertBuffer(buf: Uint8Array): Promise<Uint8Array>;
/**
 * Creates a DHT ID by hashing a Peer ID
 *
 * @param {PeerId} peer
 * @returns {Promise<Uint8Array>}
 */
export function convertPeerId(peer: PeerId): Promise<Uint8Array>;
/**
 * Convert a Uint8Array to their SHA2-256 hash.
 *
 * @param {Uint8Array} buf
 * @returns {Key}
 */
export function bufferToKey(buf: Uint8Array): Key;
/**
 * Generate the key for a public key.
 *
 * @param {PeerId} peer
 * @returns {Uint8Array}
 */
export function keyForPublicKey(peer: PeerId): Uint8Array;
/**
 * @param {Uint8Array} key
 */
export function isPublicKeyKey(key: Uint8Array): boolean;
/**
 * @param {Uint8Array} key
 */
export function isIPNSKey(key: Uint8Array): boolean;
/**
 * @param {Uint8Array} key
 */
export function fromPublicKeyKey(key: Uint8Array): PeerId;
/**
 * Create a new put record, encodes and signs it if enabled.
 *
 * @param {Uint8Array} key
 * @param {Uint8Array} value
 * @returns {Uint8Array}
 */
export function createPutRecord(key: Uint8Array, value: Uint8Array): Uint8Array;
/**
 * Creates a logger for the given subsystem
 *
 * @param {string} name
 */
export function logger(name: string): debug.Debugger & {
    error: debug.Debugger;
};
import PeerId = require("peer-id");
import { Key } from "interface-datastore/key";
import debug = require("debug");
//# sourceMappingURL=utils.d.ts.map