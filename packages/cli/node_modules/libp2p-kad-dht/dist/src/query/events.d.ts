export type PeerId = import('peer-id');
export type QueryEvent = import('../types').QueryEvent;
export type PeerData = import('../types').PeerData;
export type Message = import('../message').Message;
export type MessageType = import('../message/dht').Message.MessageType;
export type Record = import('../types').DHTRecord;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../types').QueryEvent} QueryEvent
 * @typedef {import('../types').PeerData} PeerData
 * @typedef {import('../message').Message} Message
 * @typedef {import('../message/dht').Message.MessageType} MessageType
 * @typedef {import('../types').DHTRecord} Record
 */
/**
 * @param {object} fields
 * @param {PeerId} fields.to
 * @param {number} fields.type
 * @returns {import('../types').SendingQueryEvent}
 */
export function sendingQueryEvent(fields: {
    to: PeerId;
    type: number;
}): import('../types').SendingQueryEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.from
 * @param {MessageType} fields.messageType
 * @param {PeerData[]} [fields.closer]
 * @param {PeerData[]} [fields.providers]
 * @param {Record} [fields.record]
 * @returns {import('../types').PeerResponseEvent}
 */
export function peerResponseEvent(fields: {
    from: PeerId;
    messageType: MessageType;
    closer?: import("../types").PeerData[] | undefined;
    providers?: import("../types").PeerData[] | undefined;
    record?: import("../types").DHTRecord | undefined;
}): import('../types').PeerResponseEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.from
 * @param {PeerData} fields.peer
 * @returns {import('../types').FinalPeerEvent}
 */
export function finalPeerEvent(fields: {
    from: PeerId;
    peer: PeerData;
}): import('../types').FinalPeerEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.from
 * @param {Error} fields.error
 * @returns {import('../types').QueryErrorEvent}
 */
export function queryErrorEvent(fields: {
    from: PeerId;
    error: Error;
}): import('../types').QueryErrorEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.from
 * @param {PeerData[]} fields.providers
 * @returns {import('../types').ProviderEvent}
 */
export function providerEvent(fields: {
    from: PeerId;
    providers: PeerData[];
}): import('../types').ProviderEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.from
 * @param {Uint8Array} fields.value
 * @returns {import('../types').ValueEvent}
 */
export function valueEvent(fields: {
    from: PeerId;
    value: Uint8Array;
}): import('../types').ValueEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.peer
 * @returns {import('../types').AddingPeerEvent}
 */
export function addingPeerEvent(fields: {
    peer: PeerId;
}): import('../types').AddingPeerEvent;
/**
 * @param {object} fields
 * @param {PeerId} fields.peer
 * @returns {import('../types').DialingPeerEvent}
 */
export function dialingPeerEvent(fields: {
    peer: PeerId;
}): import('../types').DialingPeerEvent;
//# sourceMappingURL=events.d.ts.map