export type PeerId = import('peer-id');
export type DHTMessageHandler = import('../types').DHTMessageHandler;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
 */
/**
 * @implements {DHTMessageHandler}
 */
export class GetValueHandler implements DHTMessageHandler {
    /**
     * @param {object} params
     * @param {PeerId} params.peerId
     * @param {import('../../types').PeerStore} params.peerStore
     * @param {import('../../peer-routing').PeerRouting} params.peerRouting
     * @param {import('interface-datastore').Datastore} params.records
     */
    constructor({ peerId, peerStore, peerRouting, records }: {
        peerId: PeerId;
        peerStore: import('../../types').PeerStore;
        peerRouting: import('../../peer-routing').PeerRouting;
        records: import('interface-datastore').Datastore;
    });
    _peerId: import("peer-id");
    _peerStore: import("../../types").PeerStore;
    _peerRouting: import("../../peer-routing").PeerRouting;
    _records: import("interface-datastore").Datastore;
    /**
     * Process `GetValue` DHT messages.
     *
     * @param {PeerId} peerId
     * @param {Message} msg
     */
    handle(peerId: PeerId, msg: Message): Promise<Message>;
    /**
     * Try to fetch a given record by from the local datastore.
     * Returns the record iff it is still valid, meaning
     * - it was either authored by this node, or
     * - it was received less than `MAX_RECORD_AGE` ago.
     *
     * @param {Uint8Array} key
     */
    _checkLocalDatastore(key: Uint8Array): Promise<import("libp2p-record/dist/src/record") | undefined>;
}
import { Message } from "../../message";
//# sourceMappingURL=get-value.d.ts.map