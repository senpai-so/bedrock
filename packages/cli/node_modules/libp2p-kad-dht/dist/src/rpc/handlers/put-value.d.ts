export type PeerId = import('peer-id');
export type Message = import('../../message').Message;
export type DHTMessageHandler = import('../types').DHTMessageHandler;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../../message').Message} Message
 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
 */
/**
 * @implements {DHTMessageHandler}
 */
export class PutValueHandler implements DHTMessageHandler {
    /**
     * @param {object} params
     * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
     * @param {import('interface-datastore').Datastore} params.records
     */
    constructor({ validators, records }: {
        validators: import('libp2p-interfaces/src/types').DhtValidators;
        records: import('interface-datastore').Datastore;
    });
    _validators: import("libp2p-interfaces/src/types").DhtValidators;
    _records: import("interface-datastore").Datastore;
    /**
     * Process `PutValue` DHT messages.
     *
     * @param {PeerId} peerId
     * @param {Message} msg
     */
    handle(peerId: PeerId, msg: Message): Promise<import("../../message").Message>;
}
//# sourceMappingURL=put-value.d.ts.map