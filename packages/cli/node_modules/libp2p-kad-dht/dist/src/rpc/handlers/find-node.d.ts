export type PeerId = import('peer-id');
export type DHTMessageHandler = import('../types').DHTMessageHandler;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
 */
/**
 * @implements {DHTMessageHandler}
 */
export class FindNodeHandler implements DHTMessageHandler {
    /**
     * @param {object} params
     * @param {PeerId} params.peerId
     * @param {import('../../types').Addressable} params.addressable
     * @param {import('../../peer-routing').PeerRouting} params.peerRouting
     * @param {boolean} [params.lan]
     */
    constructor({ peerId, addressable, peerRouting, lan }: {
        peerId: PeerId;
        addressable: import('../../types').Addressable;
        peerRouting: import('../../peer-routing').PeerRouting;
        lan?: boolean | undefined;
    });
    _peerId: import("peer-id");
    _addressable: import("../../types").Addressable;
    _peerRouting: import("../../peer-routing").PeerRouting;
    _lan: boolean;
    /**
     * Process `FindNode` DHT messages
     *
     * @param {PeerId} peerId
     * @param {Message} msg
     */
    handle(peerId: PeerId, msg: Message): Promise<Message>;
}
import { Message } from "../../message";
//# sourceMappingURL=find-node.d.ts.map