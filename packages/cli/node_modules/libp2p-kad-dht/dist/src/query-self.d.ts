/**
 * Receives notifications of new peers joining the network that support the DHT protocol
 */
export class QuerySelf extends EventEmitter {
    /**
     * Create a new network
     *
     * @param {object} params
     * @param {import('peer-id')} params.peerId
     * @param {import('./peer-routing').PeerRouting} params.peerRouting
     * @param {number} [params.count] - how many peers to find
     * @param {number} [params.interval] - how often to find them
     * @param {number} [params.queryTimeout] - how long to let queries run
     * @param {boolean} params.lan
     */
    constructor({ peerId, peerRouting, lan, count, interval, queryTimeout }: {
        peerId: import('peer-id');
        peerRouting: import('./peer-routing').PeerRouting;
        count?: number | undefined;
        interval?: number | undefined;
        queryTimeout?: number | undefined;
        lan: boolean;
    });
    _log: debug.Debugger & {
        error: debug.Debugger;
    };
    _running: boolean;
    _peerId: import("peer-id");
    _peerRouting: import("./peer-routing").PeerRouting;
    _count: number;
    _interval: number;
    _queryTimeout: number;
    /**
     * Start the network
     */
    start(): void;
    /**
     * Stop all network activity
     */
    stop(): void;
    _querySelf(): Promise<void>;
    _controller: AbortController | undefined;
    _timeoutId: NodeJS.Timeout | undefined;
}
import { EventEmitter } from "events";
//# sourceMappingURL=query-self.d.ts.map