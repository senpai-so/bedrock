import debounce from 'just-debounce-it';
import { BitswapMessage as Message } from '../message/index.js';
import { logger } from '../utils/index.js';
import { wantlistSendDebounceMs } from '../constants.js';
export class MsgQueue {
  constructor(selfPeerId, otherPeerId, network) {
    this.peerId = otherPeerId;
    this.network = network;
    this.refcnt = 1;
    this._entries = [];
    this._log = logger(selfPeerId, 'msgqueue');
    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);
  }
  addMessage(msg) {
    if (msg.empty) {
      return;
    }
    this.send(msg);
  }
  addEntries(entries) {
    this._entries = this._entries.concat(entries);
    this.sendEntries();
  }
  _sendEntries() {
    if (!this._entries.length) {
      return;
    }
    const msg = new Message(false);
    this._entries.forEach(entry => {
      if (entry.cancel) {
        msg.cancel(entry.cid);
      } else {
        msg.addEntry(entry.cid, entry.priority);
      }
    });
    this._entries = [];
    this.addMessage(msg);
  }
  async send(msg) {
    try {
      await this.network.connectTo(this.peerId);
    } catch (err) {
      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);
      return;
    }
    this._log('sending message to peer %s', this.peerId.toB58String());
    this.network.sendMessage(this.peerId, msg).catch(err => {
      this._log.error('send error: %s', err.message);
    });
  }
}