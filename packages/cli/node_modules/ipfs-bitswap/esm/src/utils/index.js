import debug from 'debug';
import { equals as uint8ArrayEquals } from 'uint8arrays/equals';
import { BitswapMessageEntry } from '../message/entry.js';
export const logger = (id, subsystem) => {
  const name = ['bitswap'];
  if (subsystem) {
    name.push(subsystem);
  }
  if (id) {
    name.push(`${ id.toB58String().slice(0, 8) }`);
  }
  return Object.assign(debug(name.join(':')), { error: debug(name.concat(['error']).join(':')) });
};
export const includesWith = (pred, x, list) => {
  let idx = 0;
  const len = list.length;
  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
};
export const uniqWith = (pred, list) => {
  let idx = 0;
  const len = list.length;
  const result = [];
  let item;
  while (idx < len) {
    item = list[idx];
    if (!includesWith(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
};
export const groupBy = (pred, list) => {
  return list.reduce((acc, v) => {
    const k = pred(v);
    if (acc[k]) {
      acc[k].push(v);
    } else {
      acc[k] = [v];
    }
    return acc;
  }, {});
};
export const pullAllWith = (pred, list, values) => {
  return list.filter(i => {
    return !includesWith(pred, i, values);
  });
};
export const sortBy = (fn, list) => {
  return Array.prototype.slice.call(list, 0).sort((a, b) => {
    const aa = fn(a);
    const bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
};
export const isMapEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }
  for (const [key, valueA] of a) {
    const valueB = b.get(key);
    if (valueB === undefined) {
      return false;
    }
    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {
      return false;
    }
    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {
      return false;
    }
  }
  return true;
};