/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('multiformats').CID} CID
 */
export class WantManager {
    /**
     * @param {PeerId} peerId
     * @param {import('../network').Network} network
     * @param {import('../stats').Stats} stats
     */
    constructor(peerId: PeerId, network: import('../network').Network, stats: import('../stats').Stats);
    /** @type {Map<string, MsgQueue>} */
    peers: Map<string, MsgQueue>;
    wantlist: Wantlist;
    network: import("../network").Network;
    _stats: import("../stats").Stats;
    _peerId: import("peer-id");
    _log: import("debug").Debugger & {
        error: import("debug").Debugger;
    };
    /**
     * @private
     * @param {CID[]} cids
     * @param {boolean} cancel
     * @param {boolean} [force]
     */
    private _addEntries;
    /**
     * @private
     * @param {PeerId} peerId
     */
    private _startPeerHandler;
    /**
     * @private
     * @param {PeerId} peerId
     */
    private _stopPeerHandler;
    /**
     * add all the cids to the wantlist
     *
     * @param {CID[]} cids
     * @param {Object} [options]
     * @param {AbortSignal} [options.signal]
     */
    wantBlocks(cids: CID[], options?: {
        signal?: AbortSignal | undefined;
    } | undefined): void;
    /**
     * Remove blocks of all the given keys without respecting refcounts
     *
     * @param {CID[]} cids
     */
    unwantBlocks(cids: CID[]): void;
    /**
     * Cancel wanting all of the given keys
     *
     * @param {CID[]} cids
     */
    cancelWants(cids: CID[]): void;
    /**
     * Returns a list of all currently connected peers
     */
    connectedPeers(): string[];
    /**
     * @param {PeerId} peerId
     */
    connected(peerId: PeerId): void;
    /**
     * @param {PeerId} peerId
     */
    disconnected(peerId: PeerId): void;
    start(): void;
    stop(): void;
}
export type PeerId = import('peer-id');
export type CID = import('multiformats').CID;
import { MsgQueue } from "./msg-queue.js";
import { Wantlist } from "../wantlist/index.js";
//# sourceMappingURL=index.d.ts.map