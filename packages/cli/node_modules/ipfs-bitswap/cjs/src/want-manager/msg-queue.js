'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var debounce = require('just-debounce-it');
var index$1 = require('../message/index.js');
var index = require('../utils/index.js');
var constants = require('../constants.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);

class MsgQueue {
  constructor(selfPeerId, otherPeerId, network) {
    this.peerId = otherPeerId;
    this.network = network;
    this.refcnt = 1;
    this._entries = [];
    this._log = index.logger(selfPeerId, 'msgqueue');
    this.sendEntries = debounce__default["default"](this._sendEntries.bind(this), constants.wantlistSendDebounceMs);
  }
  addMessage(msg) {
    if (msg.empty) {
      return;
    }
    this.send(msg);
  }
  addEntries(entries) {
    this._entries = this._entries.concat(entries);
    this.sendEntries();
  }
  _sendEntries() {
    if (!this._entries.length) {
      return;
    }
    const msg = new index$1.BitswapMessage(false);
    this._entries.forEach(entry => {
      if (entry.cancel) {
        msg.cancel(entry.cid);
      } else {
        msg.addEntry(entry.cid, entry.priority);
      }
    });
    this._entries = [];
    this.addMessage(msg);
  }
  async send(msg) {
    try {
      await this.network.connectTo(this.peerId);
    } catch (err) {
      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);
      return;
    }
    this._log('sending message to peer %s', this.peerId.toB58String());
    this.network.sendMessage(this.peerId, msg).catch(err => {
      this._log.error('send error: %s', err.message);
    });
  }
}

exports.MsgQueue = MsgQueue;
