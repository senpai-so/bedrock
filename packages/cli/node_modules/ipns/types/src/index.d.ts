export const namespace: "/ipns/";
export const namespaceLength: number;
export function create(privateKey: PrivateKey, value: Uint8Array, seq: number | bigint, lifetime: number): Promise<import("./types").IPNSEntry>;
export function createWithExpiration(privateKey: PrivateKey, value: Uint8Array, seq: number | bigint, expiration: string): Promise<import("./types").IPNSEntry>;
export function validate(publicKey: PublicKey, entry: IPNSEntry): Promise<void>;
export function embedPublicKey(publicKey: PublicKey, entry: IPNSEntry): Promise<import("./types").IPNSEntry | null>;
export function extractPublicKey(peerId: PeerId, entry: IPNSEntry): Promise<crypto.PublicKey>;
export function getLocalKey(key: Uint8Array): Key;
export function getIdKeys(pid: Uint8Array): {
    routingPubKey: Key;
    pkKey: Key;
    routingKey: Key;
    ipnsKey: Key;
};
export function marshal(obj: IPNSEntry): Uint8Array;
export function unmarshal(buf: Uint8Array): IPNSEntry;
export namespace validator {
    function validate(marshalledData: Uint8Array, key: Uint8Array): Promise<void>;
    function select(dataA: Uint8Array, dataB: Uint8Array): 1 | 0;
}
export type IPNSEntry = import('./types').IPNSEntry;
export type PublicKey = import('libp2p-crypto').PublicKey;
export type PrivateKey = import('libp2p-crypto').PrivateKey;
import PeerId from "peer-id";
import crypto from "libp2p-crypto";
import { Key } from "interface-datastore/key";
//# sourceMappingURL=index.d.ts.map