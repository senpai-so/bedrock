export = FloodSub;
/**
 * @typedef {import('libp2p-interfaces/src/pubsub').InMessage} InMessage
 */
/**
 * FloodSub (aka dumbsub is an implementation of pubsub focused on
 * delivering an API for Publish/Subscribe, but with no CastTree Forming
 * (it just floods the network).
 */
declare class FloodSub extends BaseProtocol {
    /**
     * @param {import('libp2p')} libp2p - instance of libp2p
     * @param {Object} [options]
     * @param {boolean} [options.emitSelf] - if publish should emit to self, if subscribed, defaults to false
     * @class
     */
    constructor(libp2p: import('libp2p'), options?: {
        emitSelf?: boolean | undefined;
    } | undefined);
    /**
     * Cache of seen messages
     *
     * @type {TimeCache}
     */
    seenCache: any;
    /**
     * Forward message to peers.
     *
     * @param {InMessage} message
     * @returns {void}
     */
    _forwardMessage(message: InMessage): void;
}
declare namespace FloodSub {
    export { multicodec, InMessage };
}
import BaseProtocol = require("libp2p-interfaces/src/pubsub");
type InMessage = import('libp2p-interfaces/src/pubsub').InMessage;
import { multicodec } from "./config";
//# sourceMappingURL=index.d.ts.map