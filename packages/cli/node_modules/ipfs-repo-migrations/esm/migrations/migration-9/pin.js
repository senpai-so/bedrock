import $protobuf from 'protobufjs/minimal.js';
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
const $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});
export const ipfs = $root.ipfs = (() => {
  const ipfs = {};
  ipfs.pin = function () {
    const pin = {};
    pin.Set = function () {
      function Set(p) {
        if (p)
          for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
            if (p[ks[i]] != null)
              this[ks[i]] = p[ks[i]];
      }
      Set.prototype.version = 0;
      Set.prototype.fanout = 0;
      Set.prototype.seed = 0;
      Set.encode = function encode(m, w) {
        if (!w)
          w = $Writer.create();
        if (m.version != null && Object.hasOwnProperty.call(m, 'version'))
          w.uint32(8).uint32(m.version);
        if (m.fanout != null && Object.hasOwnProperty.call(m, 'fanout'))
          w.uint32(16).uint32(m.fanout);
        if (m.seed != null && Object.hasOwnProperty.call(m, 'seed'))
          w.uint32(29).fixed32(m.seed);
        return w;
      };
      Set.decode = function decode(r, l) {
        if (!(r instanceof $Reader))
          r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();
        while (r.pos < c) {
          var t = r.uint32();
          switch (t >>> 3) {
          case 1:
            m.version = r.uint32();
            break;
          case 2:
            m.fanout = r.uint32();
            break;
          case 3:
            m.seed = r.fixed32();
            break;
          default:
            r.skipType(t & 7);
            break;
          }
        }
        return m;
      };
      Set.fromObject = function fromObject(d) {
        if (d instanceof $root.ipfs.pin.Set)
          return d;
        var m = new $root.ipfs.pin.Set();
        if (d.version != null) {
          m.version = d.version >>> 0;
        }
        if (d.fanout != null) {
          m.fanout = d.fanout >>> 0;
        }
        if (d.seed != null) {
          m.seed = d.seed >>> 0;
        }
        return m;
      };
      Set.toObject = function toObject(m, o) {
        if (!o)
          o = {};
        var d = {};
        if (o.defaults) {
          d.version = 0;
          d.fanout = 0;
          d.seed = 0;
        }
        if (m.version != null && m.hasOwnProperty('version')) {
          d.version = m.version;
        }
        if (m.fanout != null && m.hasOwnProperty('fanout')) {
          d.fanout = m.fanout;
        }
        if (m.seed != null && m.hasOwnProperty('seed')) {
          d.seed = m.seed;
        }
        return d;
      };
      Set.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };
      return Set;
    }();
    return pin;
  }();
  return ipfs;
})();
export {
  $root as default
};