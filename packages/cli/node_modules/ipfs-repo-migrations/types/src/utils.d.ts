/**
 * Level dbs wrap level dbs that wrap level dbs. Find a level-js
 * instance in the chain if one exists.
 *
 * @param {Datastore} store
 * @returns {Datastore | undefined}
 */
export function findLevelJs(store: Datastore): Datastore | undefined;
/**
 * @param {Key} key
 * @param {function (Key): Promise<boolean>} has
 * @param {Datastore} store
 * @returns {Promise<boolean>}
 */
export function hasWithFallback(key: Key, has: (arg0: Key) => Promise<boolean>, store: Datastore): Promise<boolean>;
/**
 * @param {import('./types').Backends} backends
 */
export function wrapBackends(backends: import('./types').Backends): {
    root: import("interface-datastore").Datastore;
    datastore: import("interface-datastore").Datastore;
    pins: import("interface-datastore").Datastore;
    keys: import("interface-datastore").Datastore;
    blocks: import("interface-blockstore").Blockstore;
};
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 */
export const CONFIG_KEY: Key;
export const VERSION_KEY: Key;
export type Datastore = import('interface-datastore').Datastore;
import { Key } from "interface-datastore/key";
//# sourceMappingURL=utils.d.ts.map