declare var _default: "                  IPFS -- Inter-Planetary File system\n\nIPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas\nfrom Git, BitTorrent, Kademlia, SFS, and the Web. It is like a single bit-\ntorrent swarm, exchanging git objects. IPFS provides an interface as simple\nas the HTTP web, but with permanence built in. You can also mount the world\nat /ipfs.\n\nIPFS is a protocol:\n- defines a content-addressed file system\n- coordinates content delivery\n- combines Kademlia + BitTorrent + Git\n\nIPFS is a filesystem:\n- has directories and files\n- mountable filesystem (via FUSE)\n\nIPFS is a web:\n- can be used to view documents like the web\n- files accessible via HTTP at 'http://ipfs.io/<path>'\n- browsers or extensions can learn to use 'ipfs://' directly\n- hash-addressed content guarantees authenticity\n\nIPFS is modular:\n- connection layer over any network protocol\n- routing layer\n- uses a routing layer DHT (kademlia/coral)\n- uses a path-based naming service\n- uses bittorrent-inspired block exchange\n\nIPFS uses crypto:\n- cryptographic-hash content addressing\n- block-level deduplication\n- file integrity + versioning\n- filesystem-level encryption + signing support\n\nIPFS is p2p:\n- worldwide peer-to-peer file transfers\n- completely decentralized architecture\n- **no** central point of failure\n\nIPFS is a cdn:\n- add a file to the filesystem locally, and it's now available to the world\n- caching-friendly (content-hash naming)\n- bittorrent-based bandwidth distribution\n\nIPFS has a name service:\n- IPNS, an SFS inspired name system\n- global namespace based on PKI\n- serves to build trust chains\n- compatible with other NSes\n- can map DNS, .onion, .bit, etc to IPNS\n";
export default _default;
//# sourceMappingURL=about.d.ts.map