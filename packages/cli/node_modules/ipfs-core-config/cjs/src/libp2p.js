'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var TCP = require('libp2p-tcp');
var MulticastDNS = require('libp2p-mdns');
var WS = require('libp2p-websockets');
var KadDHT = require('libp2p-kad-dht');
var GossipSub = require('libp2p-gossipsub');
var Multiplex = require('libp2p-mplex');
var libp2pNoise = require('@chainsafe/libp2p-noise');
var ipns = require('./utils/ipns.js');
var os = require('os');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var TCP__default = /*#__PURE__*/_interopDefaultLegacy(TCP);
var MulticastDNS__default = /*#__PURE__*/_interopDefaultLegacy(MulticastDNS);
var WS__default = /*#__PURE__*/_interopDefaultLegacy(WS);
var KadDHT__default = /*#__PURE__*/_interopDefaultLegacy(KadDHT);
var GossipSub__default = /*#__PURE__*/_interopDefaultLegacy(GossipSub);
var Multiplex__default = /*#__PURE__*/_interopDefaultLegacy(Multiplex);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);

function libp2pConfig() {
  const options = {
    dialer: {
      maxParallelDials: 150,
      maxDialsPerPeer: 4,
      dialTimeout: 10000
    },
    modules: {
      transport: [
        TCP__default["default"],
        WS__default["default"]
      ],
      streamMuxer: [Multiplex__default["default"]],
      connEncryption: [libp2pNoise.NOISE],
      peerDiscovery: [MulticastDNS__default["default"]],
      dht: KadDHT__default["default"],
      pubsub: GossipSub__default["default"]
    },
    config: {
      peerDiscovery: {
        autoDial: true,
        [MulticastDNS__default["default"].tag]: { enabled: true },
        bootstrap: { enabled: true }
      },
      dht: {
        kBucketSize: 20,
        enabled: true,
        clientMode: true,
        validators: { ipns: ipns.validator },
        selectors: { ipns: ipns.selector }
      },
      pubsub: {
        enabled: true,
        emitSelf: true
      },
      nat: {
        enabled: true,
        description: `ipfs@${ os__default["default"].hostname() }`
      }
    },
    metrics: { enabled: true },
    peerStore: { persistence: true }
  };
  return options;
}

exports.libp2pConfig = libp2pConfig;
