'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dns = require('dns');
var isIPFS = require('is-ipfs');
var errcode = require('err-code');
var util = require('util');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dns__default = /*#__PURE__*/_interopDefaultLegacy(dns);
var isIPFS__default = /*#__PURE__*/_interopDefaultLegacy(isIPFS);
var errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);

const MAX_RECURSIVE_DEPTH = 32;
function resolveDnslink(domain, opts) {
  const nonRecursive = !opts.recursive;
  let depth = MAX_RECURSIVE_DEPTH;
  if (nonRecursive) {
    depth = undefined;
  }
  return recursiveResolveDnslink(domain, depth);
}
async function recursiveResolveDnslink(domain, depth) {
  if (depth === 0) {
    throw errcode__default["default"](new Error('recursion limit exceeded'), 'ERR_DNSLINK_RECURSION_LIMIT');
  }
  let dnslinkRecord;
  try {
    dnslinkRecord = await resolve(domain);
  } catch (err) {
    if (err.code !== 'ENOTFOUND' && err.code !== 'ERR_DNSLINK_NOT_FOUND' && err.code !== 'ENODATA') {
      throw err;
    }
    if (domain.startsWith('_dnslink.')) {
      dnslinkRecord = await resolve(domain.replace('_dnslink.', ''));
    } else {
      const _dnslinkDomain = `_dnslink.${ domain }`;
      dnslinkRecord = await resolve(_dnslinkDomain);
    }
  }
  const result = dnslinkRecord.replace('dnslink=', '');
  const domainOrCID = result.split('/')[2];
  const isIPFSCID = isIPFS__default["default"].cid(domainOrCID);
  if (isIPFSCID || !depth) {
    return result;
  }
  return recursiveResolveDnslink(domainOrCID, depth - 1);
}
async function resolve(domain) {
  const DNSLINK_REGEX = /^dnslink=.+$/;
  const records = await util.promisify(dns__default["default"].resolveTxt)(domain);
  const dnslinkRecords = records.reduce((rs, r) => rs.concat(r), []).filter(record => DNSLINK_REGEX.test(record));
  if (dnslinkRecords.length === 0) {
    throw errcode__default["default"](new Error(`No dnslink records found for domain: ${ domain }`), 'ERR_DNSLINK_NOT_FOUND');
  }
  return dnslinkRecords[0];
}

exports.resolveDnslink = resolveDnslink;
